dnl	$Id: configure.in,v 8.3 1996/02/20 19:17:58 bostic Exp $ (Berkeley) $Date: 1996/02/20 19:17:58 $

dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure)
AC_CONFIG_HEADER(config.h)
AC_C_CROSS()
AC_PROG_CPP()

dnl Interactive checks
dnl Check to see what curses library the user wants.
AC_SUBST(cinc)
AC_SUBST(cobjs)
AC_MSG_CHECKING(curses library)
AC_CACHE_VAL(vi_cv_curses, [dnl
AC_TRY_RUN([#include <stdio.h>
	main(){int ch;
	printf("\nDo you want to use the system curses library? (y/n) ");
	exit((ch = getchar()) != 'Y' && ch != 'y');}],
	[vi_cv_curses="system curses"],
AC_TRY_RUN([#include <stdio.h>
	main(){int ch;
	printf("Do you want to use the vi supplied curses library? (y/n) ");
	exit((ch = getchar()) != 'Y' && ch != 'y');}],
	[vi_cv_curses="vi curses"],
AC_TRY_RUN([#include <stdio.h>
	main(){
	FILE *fp; char *buf;
	buf = malloc(1024);
	printf("Type in the pathname of the curses library: ");
	fgets(buf, 1024, stdin);
	fp = fopen("curses_library_path", "w");
	fputs(buf, fp);
	fclose(fp);
	printf("Type in the pathname of the directory holding <curses.h>: ");
	fgets(buf, 1024, stdin);
	fp = fopen("curses_include_path", "w");
	fputs(buf, fp);
	fclose(fp);
	exit(0);}],
	[vi_cv_curses="user specified curses"], [vi_cv_curses=no])))])
AC_MSG_RESULT($vi_cv_curses)
if test "$vi_cv_curses" = "system curses"; then
	LIBS="$LIBS -lcurses"
fi
if test "$vi_cv_curses" = "vi curses"; then
	cinc="-I../curses"
	cobjs=\$\{COBJS\}
fi
if test "$vi_cv_curses" = "user specified curses"; then
	cinc="-I`cat curses_include_path`"
	LIBS="$LIBS `cat curses_library_path`"
fi
if test "$vi_cv_curses" = no; then
	echo "Fatal error: no curses library to use."
	exit 1
fi

dnl Checks for programs.
SAVED_PATH=$PATH
PATH="$PATH:/usr/bin:/usr/sbin:/sbin:/etc:/usr/etc:/usr/lib:"

dnl Check for the shell path.
AC_PATH_PROG(vi_cv_path_shell, sh, no)
if test "$vi_cv_path_shell" = no; then
	echo "Fatal error: the shell utility not found."
	exit 1
fi
dnl Check for the sendmail path.
AC_PATH_PROG(vi_cv_path_sendmail, sendmail, no)
if test "$vi_cv_path_sendmail" = no; then
	echo "Fatal error: the sendmail utility not found."
	exit 1
fi
dnl Check for the /var/tmp path.
AC_SUBST(vi_cv_path_preserve)
AC_MSG_CHECKING(preserve directory)
AC_CACHE_VAL(vi_cv_path_preserve, [dnl
	if test -d /var/tmp; then
		vi_cv_path_preserve=/var/tmp
	else
	if test -d /usr/tmp; then
		vi_cv_path_preserve=/var/tmp
	else
		vi_cv_path_preserve=no
	fi
	fi
])
if test "$vi_cv_path_preserve" = no; then
	echo "Fatal error: no preserve directory found."
	exit 1
fi
AC_MSG_RESULT($vi_cv_path_preserve)

dnl Checks for libraries.
dnl Check to see if we can load a Tcl interpreter and Tk vi front-end.
AC_SUBST(tknvi)
SAVED_LIBS=$LIBS
LIBS="$LIBS -ltk -ltcl -lm"
AC_MSG_CHECKING(Tcl interpreter)
AC_CACHE_VAL(vi_cv_tcltk, [dnl
AC_TRY_LINK([#include <tcl.h>], [Tcl_Eval(0, 0);],
	[vi_cv_tcltk=yes], [vi_cv_tcltk=no])])
if test "$vi_cv_tcltk" = yes; then
	tknvi=tknvi
	AC_DEFINE(HAVE_TCL_INTERP)
else
	LIBS=$SAVED_LIBS
fi
AC_MSG_RESULT($vi_cv_tcltk)

dnl Check for the termcap/termlib library.
AC_CHECK_LIB(termlib, tgetent,
	[vi_cv_termlib=-ltermlib], [vi_cv_termlib=no])
if test "$vi_cv_termlib" = no; then
	AC_CHECK_LIB(termcap, tgetent,
		[vi_cv_termlib=-ltermcap], [vi_cv_termlib=no])
fi
if test "$vi_cv_termlib" != no; then
	LIBS="$LIBS $vi_cv_termlib"
fi

dnl Checks for header files.
AC_MSG_CHECKING(sys/select.h)
AC_CACHE_VAL(vi_cv_include_sys_select, [dnl
AC_TRY_CPP([#include <sys/select.h>], 
	[vi_cv_include_sys_select=yes], [vi_cv_include_sys_select=no])])
if test "$vi_cv_include_sys_select" = yes; then
	AC_DEFINE(HAVE_SYS_SELECT_H)
fi
AC_MSG_RESULT($vi_cv_include_sys_select)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_TYPE(ssize_t, int)
AC_C_BIGENDIAN
AC_C_CONST
AC_STRUCT_ST_BLKSIZE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl Currently, no changes to compiler flags per architecture.
AC_SUBST(lflags)

dnl Checks for library functions.
AC_REPLACE_FUNCS(bsearch)
AC_REPLACE_FUNCS(fchmod)
AC_REPLACE_FUNCS(getopt)
AC_REPLACE_FUNCS(memchr)
AC_REPLACE_FUNCS(memmove)
AC_REPLACE_FUNCS(memset)
AC_FUNC_MMAP
AC_REPLACE_FUNCS(mmap)
AC_REPLACE_FUNCS(openpty)
AC_REPLACE_FUNCS(realloc)
AC_CHECK_FUNCS(select)
AC_REPLACE_FUNCS(snprintf)
AC_REPLACE_FUNCS(strdup)
AC_REPLACE_FUNCS(strerror)
AC_REPLACE_FUNCS(strpbrk)
AC_REPLACE_FUNCS(strsep)
AC_REPLACE_FUNCS(strtol)
AC_REPLACE_FUNCS(strtoul)
AC_FUNC_VFORK
AC_FUNC_VPRINTF

dnl Check for fcntl/flock
AC_MSG_CHECKING(flock/fcntl)
AC_CACHE_VAL(vi_cv_lock, [dnl
AC_TRY_LINK([#include <fcntl.h>], [flock(0, 0);],
	[vi_cv_lock=flock],
AC_TRY_LINK([#include <fcntl.h>], [fcntl(0, F_SETLK, 0);],
	[vi_cv_lock=fcntl]), [vi_cv_lock=none])])
if test "$vi_cv_lock" = flock; then
	AC_DEFINE(HAVE_LOCK_FLOCK)
fi
if test "$vi_cv_lock" = fcntl; then
	AC_DEFINE(HAVE_LOCK_FCNTL)
fi
AC_MSG_RESULT($vi_cv_lock)

dnl Check for ftruncate/chsize
AC_MSG_CHECKING(ftruncate/chsize)
AC_CACHE_VAL(vi_cv_ftruncate, [dnl
AC_TRY_LINK([#include <unistd.h>], [ftruncate(0, 0);],
	[vi_cv_ftruncate=ftruncate],
AC_TRY_LINK([#include <unistd.h>], [chsize(0, 0);],
	[vi_cv_ftruncate=chsize]), [vi_cv_ftruncate=none])])
if test "$vi_cv_ftruncate" = ftruncate; then
	AC_DEFINE(HAVE_FTRUNCATE_FTRUNCATE)
fi
if test "$vi_cv_ftruncate" = chsize; then
	AC_DEFINE(HAVE_FTRUNCATE_CHSIZE)
fi
if test "$vi_cv_ftruncate" = no; then
	echo "Fatal error: no file truncation system call."
	exit 1
fi
AC_MSG_RESULT($vi_cv_ftruncate)

dnl Check for the tigetstr/tigetnum functions.
AC_MSG_CHECKING(tigetstr/tigetnum)
AC_CACHE_VAL(vi_cv_have_curses_tigetstr, [dnl
AC_TRY_LINK([#include <curses.h>], [tigetstr(0);],
	[vi_cv_have_curses_tigetstr=yes],
	[vi_cv_have_curses_tigetstr=no])])
if test "$vi_cv_have_curses_tigetstr" = yes; then
	AC_DEFINE(HAVE_CURSES_TIGETSTR)
fi
AC_MSG_RESULT($vi_cv_have_curses_tigetstr)

dnl Check for potentially missing curses functions.
if test "$vi_cv_curses" = "system curses"; then
	dnl Check for the addnstr function.
	AC_MSG_CHECKING(addnstr)
	AC_TRY_LINK([#include <curses.h>], [addnstr(0, 0);],
		[vi_cv_have_curses_addnstr=yes],
		[vi_cv_have_curses_addnstr=no])
	if test "$vi_cv_have_curses_addnstr" = yes; then
		AC_DEFINE(HAVE_CURSES_ADDNSTR)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_addnstr)

	dnl Check for the beep function.
	AC_MSG_CHECKING(beep)
	AC_TRY_LINK([#include <curses.h>], [beep();],
		[vi_cv_have_curses_beep=yes],
		[vi_cv_have_curses_beep=no])
	if test "$vi_cv_have_curses_beep" = yes; then
		AC_DEFINE(HAVE_CURSES_BEEP)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_beep)

	dnl Check for the flash function.
	AC_MSG_CHECKING(flash)
	AC_TRY_LINK([#include <curses.h>], [flash();],
		[vi_cv_have_curses_flash=yes],
		[vi_cv_have_curses_flash=no])
	if test "$vi_cv_have_curses_flash" = yes; then
		AC_DEFINE(HAVE_CURSES_FLASH)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_flash)

	dnl Check for the idlok function.
	AC_MSG_CHECKING(idlok)
	AC_TRY_LINK([#include <curses.h>], [idlok(0, 0);],
		[vi_cv_have_curses_idlok=yes],
		[vi_cv_have_curses_idlok=no])
	if test "$vi_cv_have_curses_idlok" = yes; then
		AC_DEFINE(HAVE_CURSES_IDLOK)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_idlok)

	dnl Check for the keypad function.
	AC_MSG_CHECKING(keypad)
	AC_TRY_LINK([#include <curses.h>], [keypad(0, 0);],
		[vi_cv_have_curses_keypad=yes],
		[vi_cv_have_curses_keypad=no])
	if test "$vi_cv_have_curses_keypad" = yes; then
		AC_DEFINE(HAVE_CURSES_KEYPAD)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_keypad)

	dnl Check for the newterm function.
	AC_MSG_CHECKING(newterm)
	AC_TRY_LINK([#include <curses.h>], [newterm(0, 0, 0);],
		[vi_cv_have_curses_newterm=yes],
		[vi_cv_have_curses_newterm=no])
	if test "$vi_cv_have_curses_newterm" = yes; then
		AC_DEFINE(HAVE_CURSES_NEWTERM)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_newterm)

else
	AC_DEFINE(HAVE_CURSES_IDLOK)
fi

dnl Check for the setupterm function.  We make this check regardless of
dnl using the system library, because it may be part of the underlying
dnl termcap/termlib support, and we want to use the local one.
AC_MSG_CHECKING(setupterm)
AC_TRY_LINK([#include <curses.h>], [setupterm(0, 0, 0);],
	[vi_cv_have_curses_setupterm=yes],
	[vi_cv_have_curses_setupterm=no])
if test "$vi_cv_have_curses_setupterm" = yes; then
	AC_DEFINE(HAVE_CURSES_SETUPTERM)
fi
AC_MSG_RESULT($vi_cv_have_curses_setupterm)

dnl Check for which version of openpty to use, System V or Berkeley.
AC_MSG_CHECKING(use System V pty calls)
AC_CACHE_VAL(vi_cv_sys5_pty, [dnl
AC_TRY_LINK(, [ptym_open("a");],
	[vi_cv_sys5_pty=yes], [vi_cv_sys5_pty=no])])
if test "$vi_cv_sys5_pty" = yes; then
	AC_DEFINE(HAVE_SYS5_PTY)
fi
AC_MSG_RESULT($vi_cv_sys5_pty)

dnl Check for the revoke system call.
AC_MSG_CHECKING(revoke system call)
AC_CACHE_VAL(vi_cv_revoke, [dnl
AC_TRY_LINK(, [revoke("a");],
	[vi_cv_revoke=yes], [vi_cv_revoke=no])])
if test "$vi_cv_revoke" = yes; then
	AC_DEFINE(HAVE_REVOKE)
fi
AC_MSG_RESULT($vi_cv_revoke)

dnl Some versions of sprintf return a pointer to the first argument
dnl instead of a character count.
AC_MSG_CHECKING(sprintf returns a character count)
AC_CACHE_VAL(vi_cv_sprintf_count, [dnl
AC_TRY_RUN([main(){char buf[20]; exit(sprintf(buf, "XXX") != 3);}],
	[vi_cv_sprintf_count=yes], [vi_cv_sprintf_count=no])])
if test "$vi_cv_sprintf_count" = no; then
	AC_DEFINE(SPRINTF_RET_CHARPNT)
fi
AC_MSG_RESULT($vi_cv_sprintf_count)

dnl Check for local DB.
AC_SUBST(dbinc)
AC_SUBST(dbobjs)
AC_MSG_CHECKING(C library copy of Berkeley DB package)
AC_CACHE_VAL(vi_cv_db_lib, [dnl
AC_TRY_LINK([#include <db.h>], [dbopen("a", 0, 0, 0, 0);],
	[vi_cv_db_lib=yes], [vi_cv_db_lib=no])])
if test "$vi_cv_db_lib" = no; then
	dbinc="-I../db/include"
	dbobjs=\$\{DBOBJS\}
fi
AC_MSG_RESULT($vi_cv_db_lib)

dnl Check for local RE routines.
dnl XXX
dnl Need to make sure that they have Henry's word-search extensions.
dnl So, for now, always compile it in.
AC_SUBST(reinc)
AC_SUBST(reobjs)
AC_MSG_CHECKING(C library copy of POSIX.2 RE routines)
AC_CACHE_VAL(vi_cv_re_lib, [dnl
AC_TRY_LINK([#include <regex.h>], [regerror(0, 0, 0, 0);],
	[vi_cv_re_lib=yes], [vi_cv_re_lib=no])])
if test "$vi_cv_re_lib" != NOMATCH; then
	reinc="-I../regex"
	reobjs=\$\{REOBJS\}
fi
AC_MSG_RESULT($vi_cv_re_lib)

dnl DB uses specific integer sizes.
AC_SUBST(u_int8_decl)
AC_MSG_CHECKING(u_int8_t)
AC_CACHE_VAL(vi_cv_uint8, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int8_t foo;,
	[vi_cv_uint8=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned char) != 1);}],
	[vi_cv_uint8="unsigned char"], [vi_cv_uint8=no]))])
AC_MSG_RESULT($vi_cv_uint8)
if test "$vi_cv_uint8" = no; then
	echo "Fatal error: no unsigned, 8-bit integral type."
	exit 1
fi
if test "$vi_cv_uint8" != yes; then
	u_int8_decl="typedef $vi_cv_uint8 u_int8_t;"
fi

AC_SUBST(u_int16_decl)
AC_MSG_CHECKING(u_int16_t)
AC_CACHE_VAL(vi_cv_uint16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int16_t foo;,
	[vi_cv_uint16=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned short) != 2);}],
	[vi_cv_uint16="unsigned short"],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 2);}],
	[vi_cv_uint16="unsigned int"], [vi_cv_uint16=no])))])
AC_MSG_RESULT($vi_cv_uint16)
if test "$vi_cv_uint16" = no; then
	echo "Fatal error: no unsigned, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_uint16" != yes; then
	u_int16_decl="typedef $vi_cv_uint16 u_int16_t;"
fi

AC_SUBST(int16_decl)
AC_MSG_CHECKING(int16_t)
AC_CACHE_VAL(vi_cv_int16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int16_t foo;,
	[vi_cv_int16=yes],
AC_TRY_RUN([main(){exit(sizeof(short) != 2);}],
	[vi_cv_int16="short"],
AC_TRY_RUN([main(){exit(sizeof(int) != 2);}],
	[vi_cv_int16="int"], [vi_cv_int16=no])))])
AC_MSG_RESULT($vi_cv_int16)
if test "$vi_cv_int16" = no; then
	echo "Fatal error: no signed, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_int16" != yes; then
	int16_decl="typedef $vi_cv_int16 int16_t;"
fi

AC_SUBST(u_int32_decl)
AC_MSG_CHECKING(u_int32_t)
AC_CACHE_VAL(vi_cv_uint32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int32_t foo;,
	[vi_cv_uint32=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 4);}],
	[vi_cv_uint32="unsigned int"],
AC_TRY_RUN([main(){exit(sizeof(unsigned long) != 4);}],
	[vi_cv_uint32="unsigned long"], [vi_cv_uint32=no])))])
AC_MSG_RESULT($vi_cv_uint32)
if test "$vi_cv_uint32" = no; then
	echo "Fatal error: no unsigned, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_uint32" != yes; then
	u_int32_decl="typedef $vi_cv_uint32 u_int32_t;"
fi

AC_SUBST(int32_decl)
AC_MSG_CHECKING(int32_t)
AC_CACHE_VAL(vi_cv_int32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int32_t foo;,
	[vi_cv_int32=yes],
AC_TRY_RUN([main(){exit(sizeof(int) != 4);}],
	[vi_cv_int32="int"],
AC_TRY_RUN([main(){exit(sizeof(long) != 4);}],
	[vi_cv_int32="long"], [vi_cv_int32=no])))])
AC_MSG_RESULT($vi_cv_int32)
if test "$vi_cv_int32" = no; then
	echo "Fatal error: no signed, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_int32" != yes; then
	int32_decl="typedef $vi_cv_int32 int32_t;"
fi

AC_OUTPUT(Makefile port.h:port.h.in)
