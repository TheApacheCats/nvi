dnl	$Id: configure.in,v 8.59 1996/03/12 08:49:06 bostic Exp $ (Berkeley) $Date: 1996/03/12 08:49:06 $

dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure)
AC_CONFIG_HEADER(config.h)

dnl Configure setup.
AC_C_CROSS()
AC_PROG_CPP()
AC_PROG_INSTALL()
AC_CANONICAL_HOST

dnl If the user wants a debugging environment, set CFLAGS now.
dnl Some compilers won't mix optimizing and debug flags.
AC_MSG_CHECKING(for debugging)
AC_CACHE_VAL(vi_cv_debug, [dnl
AC_ARG_ENABLE(debug,
	[  --enable-debug          Build a debugging version.],
	[vi_cv_debug="yes"], [vi_cv_debug="no"])])
if test "$vi_cv_debug" = yes; then
	AC_DEFINE(DEBUG)
	CFLAGS=${CFLAGS-"-g"}
fi
AC_MSG_RESULT($vi_cv_debug)

dnl Compilers, compiler flags and libraries per architecture.  This is where
dnl we handle stuff that autoconf can't handle.
dnl XXX
dnl Don't override CC or CFLAGS if it's already set from the environment.
dnl XXX
dnl A/UX	has broken getopt(3), strpbrk(3).
dnl		-ZP disables _BSD_SOURCE et al, but enables POSIX at link time.
AC_SUBST(CPPFLAGS)
case "$host_os" in
aix4.1*)   CFLAGS=${CFLAGS-"-O3 -qstrict"};;
aix3.2.5)  CFLAGS=${CFLAGS-"-O"};;
aux*)	   CFLAGS=${CFLAGS-"-O"}
	   CPPFLAGS="-ZP -D_BSD_SOURCE -D_SYSV_SOURCE -D_AUX_SOURCE $CPPFLAGS"
	   LDFLAGS="-ZP $LDFLAGS"
	   LIBOBJS="getopt.o strpbrk.o $LIBOBJS";;
bsd4.4)    CFLAGS=${CFLAGS-"-O2"}
	   LIBS="$LIBS -lutil";;
bsdi2.1)   CC=${CC-"shlicc"}
	   CFLAGS=${CFLAGS-"-O2"}
	   LIBS="$LIBS -lipc";;
bsdi*)	   CFLAGS=${CFLAGS-"-O2"};;
dgux*)	   LIBS="$LIBS -ldgc";;
hpux*)	   CFLAGS=${CFLAGS-"-O1"};;
irix*)	   CFLAGS=${CFLAGS-"-O2"}
	   LIBS="$LIBS -lc_s -lbsd";;
isc*)	   LIBS="$LIBS -lcposix -linet";;
netbsd*)   LIBS="$LIBS -lutil";;
nextstep3) CFLAGS=${CFLAGS-"-O9"}
	   CPPFLAGS="-w -pipe -posix $CPPFLAGS"
	   LDFLAGS="-posix $LDFLAGS";;
osf*)	   CPPFLAGS="-Olimit 1000 $CPPFLAGS";;
ptx*)	   LIBS="$LIBS -lseq -linet -lsocket";;
sinix*)	   LIBS="$LIBS -lelf -lc";;
wgs*)	   LIBS="$LIBS -lnsl";;
esac

dnl The default compiler is cc.
AC_SUBST(CC)
CC=${CC-cc}

dnl The default CFLAGS is -O
CFLAGS=${CFLAGS-"-O"}

dnl Checks for programs.
PATH="$PATH:/usr/bin:/usr/sbin:/sbin:/etc:/usr/etc:/usr/lib:"

dnl Check for the shell path.
AC_PATH_PROG(vi_cv_path_shell, sh, no)
if test "$vi_cv_path_shell" = no; then
	echo "Fatal error: the shell utility not found."
	exit 1
fi

dnl Check for the sendmail path.
AC_PATH_PROG(vi_cv_path_sendmail, sendmail, no)
if test "$vi_cv_path_sendmail" = no; then
	echo "Fatal error: the sendmail utility not found."
	exit 1
fi

dnl Check for the perl5/perl path.
AC_PATH_PROGS(vi_cv_path_perl, perl5 perl, no)

dnl Check for the "preserve" path.
AC_SUBST(vi_cv_path_preserve)
AC_MSG_CHECKING(for preserve directory)
AC_CACHE_VAL(vi_cv_path_preserve, [dnl
	if test -d /var/tmp; then
		vi_cv_path_preserve=/var/tmp
	else
	if test -d /usr/tmp; then
		vi_cv_path_preserve=/usr/tmp
	else
		vi_cv_path_preserve=no
	fi
	fi])
if test "$vi_cv_path_preserve" = no; then
	echo "Fatal error: no preserve directory found."
	exit 1
fi
AC_MSG_RESULT($vi_cv_path_preserve)

dnl Checks for libraries.
dnl Find the X libraries and includes.
AC_PATH_X
if test "$no_x" != yes; then
	XLIBS="-lX11"
	if test "X$x_libraries" != "X"; then
		XLIBS="-L$x_libraries $XLIBS"
	fi
	if test "X$x_includes" != "X"; then
		XINCS="-I$x_includes"
	fi
fi

dnl If the user wants a Perl interpreter in nvi, load it.
AC_MSG_CHECKING(for Perl interpreter)
AC_CACHE_VAL(vi_cv_perlinterp, [dnl
AC_ARG_ENABLE(perlinterp,
	[  --enable-perlinterp     Include a Perl interpreter in vi.],
	[vi_cv_perlinterp="yes"], [vi_cv_perlinterp="no"])])
AC_MSG_RESULT($vi_cv_perlinterp)
if test "$vi_cv_perlinterp" = "yes"; then
	if test "$vi_cv_path_perl" = no; then
		echo "Fatal error: no perl utility found."
		exit 1
	fi
	perlcppflags=`$vi_cv_path_perl -e 'use Config;print $Config{ccflags}'`
	if test "X$perlcppflags" != "X"; then
		CPPFLAGS="$CPPFLAGS $perlcppflags"
	fi
	perlarchlib=`$vi_cv_path_perl -e \
	    'use Config;print $Config{installarchlib}."/CORE"'`
	if test "X$perlarchlib" != "X"; then
		CPPFLAGS="$CPPFLAGS -I$perlarchlib"
	fi 
	perllib=`$vi_cv_path_perl -e \
	    'use Config;print (($Config{d_shrplib} eq "define") ? \
	    $Config{shrpdir} : ($Config{installarchlib}."/CORE"))'`
	if test "X$perllib" != "X"; then
		LIBS="$LIBS -L$perllib"
	fi
	LIBOBJS="perl.o $LIBOBJS"
	LIBS="$LIBS -lperl -lm"
	AC_DEFINE(HAVE_PERL_INTERP)
fi

dnl If the user wants a Tk/Tcl front-end for nvi, build it.
AC_SUBST(tknvi)
AC_SUBST(TKLIBS)
AC_MSG_CHECKING(for Tk/Tcl front-end)
AC_CACHE_VAL(vi_cv_tknvi, [dnl
AC_ARG_ENABLE(tknvi,
	[  --enable-tknvi          Build a Tk/Tcl front-end for vi.],
	[vi_cv_tknvi="yes"], [vi_cv_tknvi="no"])])
AC_MSG_RESULT($vi_cv_tknvi)
if test "$vi_cv_tknvi" = "yes"; then
	tknvi=tknvi
	TKLIBS="$LIBS -ltk -ltcl -lm $XLIBS"
fi

dnl If the user wants a Tk/Tcl interpreter in nvi, load it.
AC_MSG_CHECKING(for Tk/Tcl interpreter)
AC_CACHE_VAL(vi_cv_tclinterp, [dnl
AC_ARG_ENABLE(tclinterp,
	[  --enable-tclinterp      Include a Tk/Tcl interpreter in vi.],
	[vi_cv_tclinterp="yes"], [vi_cv_tclinterp="no"])])
AC_MSG_RESULT($vi_cv_tclinterp)
if test "$vi_cv_tclinterp" = "yes"; then
	LIBOBJS="tcl.o $LIBOBJS"
	LIBS="$LIBS -ltk -ltcl -lm $XLIBS"
	AC_DEFINE(HAVE_TCL_INTERP)
fi

dnl Both Tcl/Tk and Perl interpreters need the vi api code.
if test "$vi_cv_tclinterp" = yes || test "$vi_cv_perlinterp" = yes; then
	LIBOBJS="api.o $LIBOBJS"
fi

dnl Check for the termcap/termlib library.  Compile in nvi's curses routines
dnl unless the user specifies otherwise.  These two checks must occur in the
dnl current order, and -lcurses must be loaded before -ltermcap/-ltermlib.
AC_CHECK_LIB(termlib, tgetent,
	[vi_cv_termlib=-ltermlib], [vi_cv_termlib=no])
if test "$vi_cv_termlib" = no; then
	AC_CHECK_LIB(termcap, tgetent,
		[vi_cv_termlib=-ltermcap], [vi_cv_termlib=no])
fi
if test "$vi_cv_termlib" != no; then
	LIBS="$vi_cv_termlib $LIBS"
fi
AC_SUBST(cobjs)
AC_MSG_CHECKING(for curses library)
AC_CACHE_VAL(vi_cv_curses, [dnl
AC_ARG_ENABLE(curses,
	[  --disable-curses        DON'T use the nvi-provided curses routines.],
	[vi_cv_curses="other curses"], [vi_cv_curses="bundled curses"])])
AC_MSG_RESULT($vi_cv_curses)
case "$vi_cv_curses" in
"bundled curses")
	CPPFLAGS="$CPPFLAGS -I../curses"
	cobjs="\$(COBJS)";;
"other curses")
	LIBS="-lcurses $LIBS";;
esac

dnl Checks for header files.
AC_MSG_CHECKING(for sys/mman.h)
AC_CACHE_VAL(vi_cv_include_sys_mman, [dnl
AC_TRY_CPP([#include <sys/mman.h>], 
	[vi_cv_include_sys_mman=yes], [vi_cv_include_sys_mman=no])])
if test "$vi_cv_include_sys_mman" = yes; then
	AC_DEFINE(HAVE_SYS_MMAN_H)
fi
AC_MSG_RESULT($vi_cv_include_sys_mman)

AC_MSG_CHECKING(for sys/select.h)
AC_CACHE_VAL(vi_cv_include_sys_select, [dnl
AC_TRY_CPP([#include <sys/select.h>], 
	[vi_cv_include_sys_select=yes], [vi_cv_include_sys_select=no])])
if test "$vi_cv_include_sys_select" = yes; then
	AC_DEFINE(HAVE_SYS_SELECT_H)
fi
AC_MSG_RESULT($vi_cv_include_sys_select)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_TYPE(ssize_t, int)
AC_C_BIGENDIAN
AC_C_CONST
AC_STRUCT_ST_BLKSIZE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM

dnl Checks for library functions.
AC_REPLACE_FUNCS(bsearch)
AC_REPLACE_FUNCS(fchmod)
AC_REPLACE_FUNCS(gethostname)
AC_REPLACE_FUNCS(getopt)
AC_REPLACE_FUNCS(memchr)
AC_REPLACE_FUNCS(memmove)
AC_REPLACE_FUNCS(memset)
AC_REPLACE_FUNCS(mkstemp)
AC_FUNC_MMAP
AC_REPLACE_FUNCS(mmap)
AC_REPLACE_FUNCS(openpty)
AC_REPLACE_FUNCS(realloc)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(setenv, [need_env=no], [need_env=yes])
AC_REPLACE_FUNCS(snprintf)
AC_REPLACE_FUNCS(strdup)
AC_REPLACE_FUNCS(strerror)
AC_REPLACE_FUNCS(strpbrk)
AC_REPLACE_FUNCS(strsep)
AC_REPLACE_FUNCS(strtol)
AC_REPLACE_FUNCS(strtoul)
AC_CHECK_FUNCS(unsetenv,, [need_env=yes])
AC_FUNC_VFORK
AC_FUNC_VPRINTF

dnl If we needed setenv or unsetenv, add in the clib/env.c replacement file.
if test "$need_env" = yes; then
	LIBOBJS="env.o $LIBOBJS"
fi

dnl Check for fcntl/flock
dnl Use flock preferentially, since it has cleaner semantics and won't
dnl hang up the editor.
dnl XXX
dnl Ultrix has a broken fcntl, but a working flock.
dnl IRIX and DGUX have a broken flock, but working fcntl.
AC_MSG_CHECKING(for fcntl/flock)
AC_CACHE_VAL(vi_cv_lock, [dnl
	vi_cv_lock=none
	case "$host_os" in
	dgux*);;
	irix*);;
	*)
		AC_TRY_LINK([#include <fcntl.h>], [flock(0, 0);],
		    [vi_cv_lock=flock]);;
	esac
	if test "$vi_cv_lock" = none; then
		AC_TRY_LINK([#include <fcntl.h>], [fcntl(0, F_SETLK, 0);],
		    [vi_cv_lock=fcntl])
	fi])

if test "$vi_cv_lock" = flock; then
	AC_DEFINE(HAVE_LOCK_FLOCK)
fi
if test "$vi_cv_lock" = fcntl; then
	AC_DEFINE(HAVE_LOCK_FCNTL)
fi
AC_MSG_RESULT($vi_cv_lock)

dnl Check for ftruncate/chsize
AC_MSG_CHECKING(for ftruncate/chsize)
AC_CACHE_VAL(vi_cv_ftruncate, [dnl
AC_TRY_LINK([#include <unistd.h>], [ftruncate(0, 0);],
	[vi_cv_ftruncate=ftruncate],
AC_TRY_LINK([#include <unistd.h>], [chsize(0, 0);],
	[vi_cv_ftruncate=chsize]), [vi_cv_ftruncate=none])])
if test "$vi_cv_ftruncate" = ftruncate; then
	AC_DEFINE(HAVE_FTRUNCATE_FTRUNCATE)
fi
if test "$vi_cv_ftruncate" = chsize; then
	AC_DEFINE(HAVE_FTRUNCATE_CHSIZE)
fi
if test "$vi_cv_ftruncate" = no; then
	echo
	echo "Fatal error: no file truncation system call."
	exit 1
fi
AC_MSG_RESULT($vi_cv_ftruncate)

dnl Check for the tigetstr/tigetnum functions.
AC_MSG_CHECKING(for tigetstr/tigetnum)
AC_CACHE_VAL(vi_cv_have_curses_tigetstr, [dnl
AC_TRY_LINK([#include <curses.h>], [tigetstr(0);],
	[vi_cv_have_curses_tigetstr=yes],
	[vi_cv_have_curses_tigetstr=no])])
if test "$vi_cv_have_curses_tigetstr" = yes; then
	AC_DEFINE(HAVE_CURSES_TIGETSTR)
fi
AC_MSG_RESULT($vi_cv_have_curses_tigetstr)

dnl Check for potentially missing curses functions in system or user-specified
dnl libraries.  We also have to guess at whether the specified library is a
dnl BSD or System V style curses.  Use the newterm function, all System V
dnl curses implementations have it, none, as far as I know, of the BSD ones do.
if test "$vi_cv_curses" = "bundled curses"; then
	AC_DEFINE(HAVE_BSD_CURSES)
	AC_DEFINE(HAVE_CURSES_ADDNSTR)
	AC_DEFINE(HAVE_CURSES_IDLOK)
else
	dnl Check for the addnstr function.
	AC_MSG_CHECKING(for addnstr)
	AC_CACHE_VAL(vi_cv_have_curses_addnstr, [dnl
	AC_TRY_LINK([#include <curses.h>], [addnstr(0, 0);],
		[vi_cv_have_curses_addnstr=yes],
		[vi_cv_have_curses_addnstr=no])])
	if test "$vi_cv_have_curses_addnstr" = yes; then
		AC_DEFINE(HAVE_CURSES_ADDNSTR)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_addnstr)

	dnl Check for the beep function.
	AC_MSG_CHECKING(for beep)
	AC_CACHE_VAL(vi_cv_have_curses_beep, [dnl
	AC_TRY_LINK([#include <curses.h>], [beep();],
		[vi_cv_have_curses_beep=yes],
		[vi_cv_have_curses_beep=no])])
	if test "$vi_cv_have_curses_beep" = yes; then
		AC_DEFINE(HAVE_CURSES_BEEP)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_beep)

	dnl Check for the flash function.
	AC_MSG_CHECKING(for flash)
	AC_CACHE_VAL(vi_cv_have_curses_flash, [dnl
	AC_TRY_LINK([#include <curses.h>], [flash();],
		[vi_cv_have_curses_flash=yes],
		[vi_cv_have_curses_flash=no])])
	if test "$vi_cv_have_curses_flash" = yes; then
		AC_DEFINE(HAVE_CURSES_FLASH)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_flash)

	dnl Check for the idlok function.
	AC_MSG_CHECKING(for idlok)
	AC_CACHE_VAL(vi_cv_have_curses_idlok, [dnl
	AC_TRY_LINK([#include <curses.h>], [idlok(0, 0);],
		[vi_cv_have_curses_idlok=yes],
		[vi_cv_have_curses_idlok=no])])
	if test "$vi_cv_have_curses_idlok" = yes; then
		AC_DEFINE(HAVE_CURSES_IDLOK)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_idlok)

	dnl Check for the keypad function.
	AC_MSG_CHECKING(for keypad)
	AC_CACHE_VAL(vi_cv_have_curses_keypad, [dnl
	AC_TRY_LINK([#include <curses.h>], [keypad(0, 0);],
		[vi_cv_have_curses_keypad=yes],
		[vi_cv_have_curses_keypad=no])])
	if test "$vi_cv_have_curses_keypad" = yes; then
		AC_DEFINE(HAVE_CURSES_KEYPAD)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_keypad)

	dnl Check for the newterm function.
	AC_MSG_CHECKING(for newterm)
	AC_CACHE_VAL(vi_cv_have_curses_newterm, [dnl
	AC_TRY_LINK([#include <curses.h>], [newterm(0, 0, 0);],
		[vi_cv_have_curses_newterm=yes],
		[vi_cv_have_curses_newterm=no])])
	if test "$vi_cv_have_curses_newterm" = yes; then
		AC_DEFINE(HAVE_CURSES_NEWTERM)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_newterm)

	if test "$vi_cv_have_curses_newterm" = no; then
		AC_DEFINE(HAVE_BSD_CURSES)
	fi
fi

dnl Check for the setupterm function.  We make this check regardless of
dnl using the system library, because it may be part of the underlying
dnl termcap/termlib support, and we want to use the local one.
AC_MSG_CHECKING(for setupterm)
AC_CACHE_VAL(vi_cv_have_curses_setupterm, [dnl
AC_TRY_LINK([#include <curses.h>], [setupterm(0, 0, 0);],
	[vi_cv_have_curses_setupterm=yes],
	[vi_cv_have_curses_setupterm=no])])
if test "$vi_cv_have_curses_setupterm" = yes; then
	AC_DEFINE(HAVE_CURSES_SETUPTERM)
fi
AC_MSG_RESULT($vi_cv_have_curses_setupterm)

dnl Check for which version of openpty to use, System V or Berkeley.
AC_MSG_CHECKING(for System V pty calls)
AC_CACHE_VAL(vi_cv_sys5_pty, [dnl
AC_TRY_LINK(, [ptym_open("a");],
	[vi_cv_sys5_pty=yes], [vi_cv_sys5_pty=no])])
if test "$vi_cv_sys5_pty" = yes; then
	AC_DEFINE(HAVE_SYS5_PTY)
fi
AC_MSG_RESULT($vi_cv_sys5_pty)

dnl Check for the revoke system call.
AC_MSG_CHECKING(for revoke system call)
AC_CACHE_VAL(vi_cv_revoke, [dnl
AC_TRY_LINK(, [revoke("a");],
	[vi_cv_revoke=yes], [vi_cv_revoke=no])])
if test "$vi_cv_revoke" = yes; then
	AC_DEFINE(HAVE_REVOKE)
fi
AC_MSG_RESULT($vi_cv_revoke)

dnl Some versions of sprintf return a pointer to the first argument instead
dnl of a character count.  We assume that the return value of snprintf and
dnl vsprintf etc. will be the same as sprintf, and check the easy one.
AC_MSG_CHECKING(for sprintf return value)
AC_CACHE_VAL(vi_cv_sprintf_count, [dnl
AC_TRY_RUN([main(){char buf[20]; exit(sprintf(buf, "XXX") != 3);}],
	[vi_cv_sprintf_count=yes], [vi_cv_sprintf_count=no])])
if test "$vi_cv_sprintf_count" = no; then
	AC_DEFINE(SPRINTF_RET_CHARPNT)
fi
AC_MSG_RESULT($vi_cv_sprintf_count)

dnl We compile in nvi's DB routines unless the user specifies otherwise.
AC_MSG_CHECKING(for Berkeley DB package)
AC_CACHE_VAL(vi_cv_db_lib, [dnl
AC_ARG_ENABLE(db,
	[  --disable-db            DON'T use the nvi-provided DB routines.],
	[vi_cv_db_lib="other DB"], [vi_cv_db_lib="bundled DB"])])
AC_MSG_RESULT($vi_cv_db_lib)
case "$vi_cv_db_lib" in
"bundled DB")
	CPPFLAGS="$CPPFLAGS -I../db/include"
	LIBOBJS="\$(DBOBJS) $LIBOBJS";;
"other DB")
	;;
esac

dnl We compile in nvi's RE routines unless the user specifies otherwise.
AC_MSG_CHECKING(for POSIX 1003.2 RE routines)
AC_CACHE_VAL(vi_cv_re_lib, [dnl
AC_ARG_ENABLE(re,
	[  --disable-re            DON'T use the nvi-provided RE routines.],
	[vi_cv_re_lib="other RE"], [vi_cv_re_lib="bundled RE"])])
AC_MSG_RESULT($vi_cv_re_lib)
case "$vi_cv_re_lib" in
"bundled RE")
	CPPFLAGS="$CPPFLAGS -I../regex"
	LIBOBJS="\$(REOBJS) $LIBOBJS";;
"other RE")
	;;
esac

dnl DB/Vi uses specific integer sizes.
AC_SUBST(u_int8_decl)
AC_MSG_CHECKING(for u_int8_t)
AC_CACHE_VAL(vi_cv_uint8, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int8_t foo;,
	[vi_cv_uint8=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned char) != 1);}],
	[vi_cv_uint8="unsigned char"], [vi_cv_uint8=no]))])
AC_MSG_RESULT($vi_cv_uint8)
if test "$vi_cv_uint8" = no; then
	echo
	echo "Fatal error: no unsigned, 8-bit integral type."
	exit 1
fi
if test "$vi_cv_uint8" != yes; then
	u_int8_decl="typedef $vi_cv_uint8 u_int8_t;"
fi

AC_SUBST(u_int16_decl)
AC_MSG_CHECKING(for u_int16_t)
AC_CACHE_VAL(vi_cv_uint16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int16_t foo;,
	[vi_cv_uint16=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned short) != 2);}],
	[vi_cv_uint16="unsigned short"],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 2);}],
	[vi_cv_uint16="unsigned int"], [vi_cv_uint16=no])))])
AC_MSG_RESULT($vi_cv_uint16)
if test "$vi_cv_uint16" = no; then
	echo
	echo "Fatal error: no unsigned, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_uint16" != yes; then
	u_int16_decl="typedef $vi_cv_uint16 u_int16_t;"
fi

AC_SUBST(int16_decl)
AC_MSG_CHECKING(for int16_t)
AC_CACHE_VAL(vi_cv_int16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int16_t foo;,
	[vi_cv_int16=yes],
AC_TRY_RUN([main(){exit(sizeof(short) != 2);}],
	[vi_cv_int16="short"],
AC_TRY_RUN([main(){exit(sizeof(int) != 2);}],
	[vi_cv_int16="int"], [vi_cv_int16=no])))])
AC_MSG_RESULT($vi_cv_int16)
if test "$vi_cv_int16" = no; then
	echo
	echo "Fatal error: no signed, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_int16" != yes; then
	int16_decl="typedef $vi_cv_int16 int16_t;"
fi

AC_SUBST(u_int32_decl)
AC_MSG_CHECKING(for u_int32_t)
AC_CACHE_VAL(vi_cv_uint32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int32_t foo;,
	[vi_cv_uint32=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 4);}],
	[vi_cv_uint32="unsigned int"],
AC_TRY_RUN([main(){exit(sizeof(unsigned long) != 4);}],
	[vi_cv_uint32="unsigned long"], [vi_cv_uint32=no])))])
AC_MSG_RESULT($vi_cv_uint32)
if test "$vi_cv_uint32" = no; then
	echo
	echo "Fatal error: no unsigned, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_uint32" != yes; then
	u_int32_decl="typedef $vi_cv_uint32 u_int32_t;"
fi

AC_SUBST(int32_decl)
AC_MSG_CHECKING(for int32_t)
AC_CACHE_VAL(vi_cv_int32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int32_t foo;,
	[vi_cv_int32=yes],
AC_TRY_RUN([main(){exit(sizeof(int) != 4);}],
	[vi_cv_int32="int"],
AC_TRY_RUN([main(){exit(sizeof(long) != 4);}],
	[vi_cv_int32="long"], [vi_cv_int32=no])))])
AC_MSG_RESULT($vi_cv_int32)
if test "$vi_cv_int32" = no; then
	echo
	echo "Fatal error: no signed, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_int32" != yes; then
	int32_decl="typedef $vi_cv_int32 int32_t;"
fi

AC_OUTPUT(Makefile port.h:port.h.in pathnames.h:pathnames.h.in)
