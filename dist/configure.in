dnl	$Id: configure.in,v 8.50 1996/02/29 20:50:21 bostic Exp $ (Berkeley) $Date: 1996/02/29 20:50:21 $

dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure)
AC_CONFIG_HEADER(config.h)

dnl Configure setup.
AC_C_CROSS()
AC_PROG_CPP()
AC_PROG_INSTALL()
AC_CANONICAL_HOST

dnl If the user wants a debugging environment, set CFLAGS now.
dnl Some compilers won't mix optimizing and debug flags.
AC_MSG_CHECKING(for debugging)
AC_CACHE_VAL(vi_cv_debug, [dnl
AC_ARG_ENABLE(debug,
	[  --enable-debug          Build a debugging version.],
	[vi_cv_debug="yes"], [vi_cv_debug="no"])])
if test "$vi_cv_debug" = yes; then
	CFLAGS=${CFLAGS-"-g"}
	CPPFLAGS=${CPPFLAGS-"-DDEBUG"}
fi
AC_MSG_RESULT($vi_cv_debug)

dnl Compilers, compiler flags and libraries per architecture.
dnl XXX
dnl Don't override CFLAGS if it's already set from the environment.
dnl XXX
dnl A/UX	has broken getopt(3), strpbrk(3).
dnl		-ZP disables _BSD_SOURCE et al, but enables POSIX at link time.
AC_SUBST(CPPFLAGS)
case "$host_os" in
aix4.1*)   CFLAGS=${CFLAGS-"-O3 -qstrict"};;
aix3.2.5)  CFLAGS=${CFLAGS-"-O"};;
aux*)	   CFLAGS=${CFLAGS-"-O"}
	   CPPFLAGS="-ZP -D_BSD_SOURCE -D_SYSV_SOURCE -D_AUX_SOURCE $CPPFLAGS"
	   LDFLAGS="-ZP"
	   LIBOBJS="getopt.o strpbrk.o $LIBOBJS";;
bsd4.4)    CFLAGS=${CFLAGS-"-O2"}
	   LIBS="-lutil $LIBS";;
bsdi2.1)   CC=${CC-"shlicc"}
	   CFLAGS=${CFLAGS-"-O2"}
	   LIBS="-lipc $LIBS";;
bsdi*)	   CFLAGS=${CFLAGS-"-O2"};;
dgux*)	   LIBS="-ldgc $LIBS";;
hpux*)	   CFLAGS=${CFLAGS-"-O1"};;
irix*)	   CFLAGS=${CFLAGS-"-O2"}
	   LIBS="-lc_s -lbsd $LIBS";;
isc*)	   LIBS="-lcposix -linet $LIBS";;
netbsd*)   LIBS="-lutil $LIBS";;
nextstep3) CFLAGS=${CFLAGS-"-O9"}
	   CPPFLAGS="-w -pipe -posix $CPPFLAGS"
	   LDFLAGS="-posix";;
ptx*)	   LIBS="-lseq -linet -lsocket $LIBS";;
sinix*)	   LIBS="-lelf -lc $LIBS";;
wgs*)	   LIBS="-lnsl $LIBS";;
esac

dnl The default compiler is cc.
AC_SUBST(CC)
CC=${CC-cc}

dnl The default CFLAGS is -O
CFLAGS=${CFLAGS-"-O"}

dnl Checks for programs.
SAVED_PATH=$PATH
PATH="$PATH:/usr/bin:/usr/sbin:/sbin:/etc:/usr/etc:/usr/lib:"

dnl Check for the shell path.
AC_PATH_PROG(vi_cv_path_shell, sh, no)
if test "$vi_cv_path_shell" = no; then
	echo "Fatal error: the shell utility not found."
	exit 1
fi
dnl Check for the sendmail path.
AC_PATH_PROG(vi_cv_path_sendmail, sendmail, no)
if test "$vi_cv_path_sendmail" = no; then
	echo "Fatal error: the sendmail utility not found."
	exit 1
fi
dnl Check for the /var/tmp path.
AC_SUBST(vi_cv_path_preserve)
AC_MSG_CHECKING(for preserve directory)
AC_CACHE_VAL(vi_cv_path_preserve, [dnl
	if test -d /var/tmp; then
		vi_cv_path_preserve=/var/tmp
	else
	if test -d /usr/tmp; then
		vi_cv_path_preserve=/usr/tmp
	else
		vi_cv_path_preserve=no
	fi
	fi
])
if test "$vi_cv_path_preserve" = no; then
	echo "Fatal error: no preserve directory found."
	exit 1
fi
AC_MSG_RESULT($vi_cv_path_preserve)

dnl Checks for libraries.
dnl Find the X libraries and includes.
AC_PATH_X
if test "$no_x" != yes; then
	XLIBS="-lX11"
	if test "X$x_libraries" != "X"; then
		XLIBS="-L$x_libraries $XLIBS"
	fi
	if test "X$x_includes" != "X"; then
		XINCS="-I$x_includes"
	fi
fi

dnl Check to see if the Tcl/Tk libraries exist and we can load the Tk
dnl vi front-end.  The tknvi libs (TKLIBS) start off the same as LIBS.
AC_SUBST(tknvi)
AC_SUBST(TKLIBS)
SAVED_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I/usr/local/include $XINCS $CPPFLAGS"
SAVED_LIBS="$LIBS"
LIBS="-L/usr/contrib/lib -L/usr/local/lib -ltk -ltcl -lm $XLIBS $LIBS"
AC_MSG_CHECKING(for Tcl/Tk libraries)
AC_CACHE_VAL(vi_cv_tcltk, [dnl
AC_TRY_LINK([#include <tcl.h>], [Tcl_Eval(0, 0);],
	[vi_cv_tcltk=yes], [vi_cv_tcltk=no])])
if test "$vi_cv_tcltk" = yes; then
	tknvi=tknvi
	TKLIBS=$LIBS
else
	CPPFLAGS=$SAVED_CPPFLAGS
fi
LIBS=$SAVED_LIBS
AC_MSG_RESULT($vi_cv_tcltk)

dnl If the user wants a Tcl/Tk interpreter in nvi, load it.
AC_MSG_CHECKING(for Tcl/Tk interpreter)
AC_CACHE_VAL(vi_cv_tclinterp, [dnl
AC_ARG_ENABLE(tclinterp,
	[  --enable-tclinterp      Compile a Tcl/Tk interpreter into vi.],
	[vi_cv_tclinterp="yes"], [vi_cv_tclinterp="no"])])
if test "$vi_cv_tclinterp" = yes; then
	if test "$vi_cv_tcltk" = yes; then
		AC_DEFINE(HAVE_TCL_INTERP)
		LIBS=$TKLIBS
		LIBOBJS="\$(TCLOBJS) $LIBOBJS"
	else
		echo
		echo "Fatal error: the Tcl/Tk libraries not found."
		exit 1
	fi
fi
AC_MSG_RESULT($vi_cv_tclinterp)

dnl Check for the termcap/termlib library.
AC_CHECK_LIB(termlib, tgetent,
	[vi_cv_termlib=-ltermlib], [vi_cv_termlib=no])
if test "$vi_cv_termlib" = no; then
	AC_CHECK_LIB(termcap, tgetent,
		[vi_cv_termlib=-ltermcap], [vi_cv_termlib=no])
fi
if test "$vi_cv_termlib" != no; then
	LIBS="$vi_cv_termlib $LIBS"
fi

dnl Check to see what curses library the user wants.
AC_SUBST(cobjs)
AC_MSG_CHECKING(for curses library)
AC_CACHE_VAL(vi_cv_curses, [dnl
AC_ARG_WITH(curses,
	[  --with-curses=ask|system|vi
                          ask:     Prompt for the curses library to use.
                          system:  Use the system curses library.
                          vi:      Use the vi-provided curses library],
	[if test "$withval" = ask; then
		vi_cv_curses="user specified"
	else
		if test "$withval" = system; then
			vi_cv_curses="system curses"
		else
			vi_cv_curses="vi curses"
		fi
	fi], [vi_cv_curses="vi curses"])
if test "$vi_cv_curses" = "user specified"; then
AC_TRY_RUN([#include <stdio.h>
	main(){
	FILE *fp; char *buf;
	buf = malloc(1024);
	printf("\nType in the pathname of the curses library: ");
	fgets(buf, 1024, stdin);
	fp = fopen("curses_library_path", "w");
	fputs(buf, fp);
	fclose(fp);
	printf("Type in the pathname of the directory holding <curses.h>: ");
	fgets(buf, 1024, stdin);
	fp = fopen("curses_include_path", "w");
	fputs(buf, fp);
	fclose(fp);
	exit(0);}],,)
fi])
AC_MSG_RESULT($vi_cv_curses)
if test "$vi_cv_curses" = "system curses"; then
	LIBS="-lcurses $LIBS"
fi
if test "$vi_cv_curses" = "vi curses"; then
	CPPFLAGS="$CPPFLAGS -I../curses"
	cobjs="\$(COBJS)"
fi
if test "$vi_cv_curses" = "user specified"; then
	CPPFLAGS="$CPPFLAGS -I`cat curses_include_path`"
	LIBS="`cat curses_library_path` $LIBS"
fi

dnl Checks for header files.
AC_MSG_CHECKING(for sys/mman.h)
AC_CACHE_VAL(vi_cv_include_sys_mman, [dnl
AC_TRY_CPP([#include <sys/mman.h>], 
	[vi_cv_include_sys_mman=yes], [vi_cv_include_sys_mman=no])])
if test "$vi_cv_include_sys_mman" = yes; then
	CPPFLAGS="-DHAVE_SYS_MMAN_H $CPPFLAGS"
fi
AC_MSG_RESULT($vi_cv_include_sys_mman)

AC_MSG_CHECKING(for sys/select.h)
AC_CACHE_VAL(vi_cv_include_sys_select, [dnl
AC_TRY_CPP([#include <sys/select.h>], 
	[vi_cv_include_sys_select=yes], [vi_cv_include_sys_select=no])])
if test "$vi_cv_include_sys_select" = yes; then
	CPPFLAGS="-DHAVE_SYS_SELECT_H $CPPFLAGS"
fi
AC_MSG_RESULT($vi_cv_include_sys_select)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_TYPE(ssize_t, int)
AC_C_BIGENDIAN
AC_C_CONST
AC_STRUCT_ST_BLKSIZE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM

dnl Checks for library functions.
AC_REPLACE_FUNCS(bsearch)
AC_REPLACE_FUNCS(fchmod)
AC_REPLACE_FUNCS(gethostname)
AC_REPLACE_FUNCS(getopt)
AC_REPLACE_FUNCS(memchr)
AC_REPLACE_FUNCS(memmove)
AC_REPLACE_FUNCS(memset)
AC_REPLACE_FUNCS(mkstemp)
AC_FUNC_MMAP
AC_REPLACE_FUNCS(mmap)
AC_REPLACE_FUNCS(openpty)
AC_REPLACE_FUNCS(realloc)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(setenv, [need_env=no], [need_env=yes])
AC_REPLACE_FUNCS(snprintf)
AC_REPLACE_FUNCS(strdup)
AC_REPLACE_FUNCS(strerror)
AC_REPLACE_FUNCS(strpbrk)
AC_REPLACE_FUNCS(strsep)
AC_REPLACE_FUNCS(strtol)
AC_REPLACE_FUNCS(strtoul)
AC_CHECK_FUNCS(unsetenv,, [need_env=yes])
AC_FUNC_VFORK
AC_FUNC_VPRINTF

dnl If we needed setenv or unsetenv, add in the clib/env.c replacement file.
if test "$need_env" = yes; then
	LIBOBJS="env.o $LIBOBJS"
fi

dnl Check for fcntl/flock
dnl Use flock preferentially, since it has cleaner semantics and won't
dnl hang up the editor.
dnl XXX
dnl Ultrix has a broken fcntl, but a working flock.
dnl IRIX and DGUX have a broken flock, but working fcntl.
AC_MSG_CHECKING(for fcntl/flock)
AC_CACHE_VAL(vi_cv_lock, [dnl
	vi_cv_lock=none
	case "$host_os" in
	dgux*);;
	irix*);;
	*)
		AC_TRY_LINK([#include <fcntl.h>], [flock(0, 0);],
		    [vi_cv_lock=flock]);;
	esac
	if test "$vi_cv_lock" = none; then
		AC_TRY_LINK([#include <fcntl.h>], [fcntl(0, F_SETLK, 0);],
		    [vi_cv_lock=fcntl])
	fi])

if test "$vi_cv_lock" = flock; then
	AC_DEFINE(HAVE_LOCK_FLOCK)
fi
if test "$vi_cv_lock" = fcntl; then
	AC_DEFINE(HAVE_LOCK_FCNTL)
fi
AC_MSG_RESULT($vi_cv_lock)

dnl Check for ftruncate/chsize
AC_MSG_CHECKING(for ftruncate/chsize)
AC_CACHE_VAL(vi_cv_ftruncate, [dnl
AC_TRY_LINK([#include <unistd.h>], [ftruncate(0, 0);],
	[vi_cv_ftruncate=ftruncate],
AC_TRY_LINK([#include <unistd.h>], [chsize(0, 0);],
	[vi_cv_ftruncate=chsize]), [vi_cv_ftruncate=none])])
if test "$vi_cv_ftruncate" = ftruncate; then
	AC_DEFINE(HAVE_FTRUNCATE_FTRUNCATE)
fi
if test "$vi_cv_ftruncate" = chsize; then
	AC_DEFINE(HAVE_FTRUNCATE_CHSIZE)
fi
if test "$vi_cv_ftruncate" = no; then
	echo
	echo "Fatal error: no file truncation system call."
	exit 1
fi
AC_MSG_RESULT($vi_cv_ftruncate)

dnl Check for the tigetstr/tigetnum functions.
AC_MSG_CHECKING(for tigetstr/tigetnum)
AC_CACHE_VAL(vi_cv_have_curses_tigetstr, [dnl
AC_TRY_LINK([#include <curses.h>], [tigetstr(0);],
	[vi_cv_have_curses_tigetstr=yes],
	[vi_cv_have_curses_tigetstr=no])])
if test "$vi_cv_have_curses_tigetstr" = yes; then
	AC_DEFINE(HAVE_CURSES_TIGETSTR)
fi
AC_MSG_RESULT($vi_cv_have_curses_tigetstr)

dnl Check for potentially missing curses functions in system or
dnl user-specified libraries.  We also have to guess at whether
dnl the specified library is a BSD or System V style curses.
dnl Use the newterm function, all System V curses implementations
dnl have it, none, as far as I know, of the BSD ones do.
if test "$vi_cv_curses" = "vi curses"; then
	AC_DEFINE(HAVE_BSD_CURSES)
	AC_DEFINE(HAVE_CURSES_ADDNSTR)
	AC_DEFINE(HAVE_CURSES_IDLOK)
else
	dnl Check for the addnstr function.
	AC_MSG_CHECKING(for addnstr)
	AC_CACHE_VAL(vi_cv_have_curses_addnstr, [dnl
	AC_TRY_LINK([#include <curses.h>], [addnstr(0, 0);],
		[vi_cv_have_curses_addnstr=yes],
		[vi_cv_have_curses_addnstr=no])])
	if test "$vi_cv_have_curses_addnstr" = yes; then
		AC_DEFINE(HAVE_CURSES_ADDNSTR)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_addnstr)

	dnl Check for the beep function.
	AC_MSG_CHECKING(for beep)
	AC_CACHE_VAL(vi_cv_have_curses_beep, [dnl
	AC_TRY_LINK([#include <curses.h>], [beep();],
		[vi_cv_have_curses_beep=yes],
		[vi_cv_have_curses_beep=no])])
	if test "$vi_cv_have_curses_beep" = yes; then
		AC_DEFINE(HAVE_CURSES_BEEP)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_beep)

	dnl Check for the flash function.
	AC_MSG_CHECKING(for flash)
	AC_CACHE_VAL(vi_cv_have_curses_flash, [dnl
	AC_TRY_LINK([#include <curses.h>], [flash();],
		[vi_cv_have_curses_flash=yes],
		[vi_cv_have_curses_flash=no])])
	if test "$vi_cv_have_curses_flash" = yes; then
		AC_DEFINE(HAVE_CURSES_FLASH)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_flash)

	dnl Check for the idlok function.
	AC_MSG_CHECKING(for idlok)
	AC_CACHE_VAL(vi_cv_have_curses_idlok, [dnl
	AC_TRY_LINK([#include <curses.h>], [idlok(0, 0);],
		[vi_cv_have_curses_idlok=yes],
		[vi_cv_have_curses_idlok=no])])
	if test "$vi_cv_have_curses_idlok" = yes; then
		AC_DEFINE(HAVE_CURSES_IDLOK)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_idlok)

	dnl Check for the keypad function.
	AC_MSG_CHECKING(for keypad)
	AC_CACHE_VAL(vi_cv_have_curses_keypad, [dnl
	AC_TRY_LINK([#include <curses.h>], [keypad(0, 0);],
		[vi_cv_have_curses_keypad=yes],
		[vi_cv_have_curses_keypad=no])])
	if test "$vi_cv_have_curses_keypad" = yes; then
		AC_DEFINE(HAVE_CURSES_KEYPAD)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_keypad)

	dnl Check for the newterm function.
	AC_MSG_CHECKING(for newterm)
	AC_CACHE_VAL(vi_cv_have_curses_newterm, [dnl
	AC_TRY_LINK([#include <curses.h>], [newterm(0, 0, 0);],
		[vi_cv_have_curses_newterm=yes],
		[vi_cv_have_curses_newterm=no])])
	if test "$vi_cv_have_curses_newterm" = yes; then
		AC_DEFINE(HAVE_CURSES_NEWTERM)
	fi
	AC_MSG_RESULT($vi_cv_have_curses_newterm)

	if test "$vi_cv_have_curses_newterm" = no; then
		AC_DEFINE(HAVE_BSD_CURSES)
	fi
fi

dnl Check for the setupterm function.  We make this check regardless of
dnl using the system library, because it may be part of the underlying
dnl termcap/termlib support, and we want to use the local one.
AC_MSG_CHECKING(for setupterm)
AC_CACHE_VAL(vi_cv_have_curses_setupterm, [dnl
AC_TRY_LINK([#include <curses.h>], [setupterm(0, 0, 0);],
	[vi_cv_have_curses_setupterm=yes],
	[vi_cv_have_curses_setupterm=no])])
if test "$vi_cv_have_curses_setupterm" = yes; then
	AC_DEFINE(HAVE_CURSES_SETUPTERM)
fi
AC_MSG_RESULT($vi_cv_have_curses_setupterm)

dnl Check for which version of openpty to use, System V or Berkeley.
AC_MSG_CHECKING(for System V pty calls)
AC_CACHE_VAL(vi_cv_sys5_pty, [dnl
AC_TRY_LINK(, [ptym_open("a");],
	[vi_cv_sys5_pty=yes], [vi_cv_sys5_pty=no])])
if test "$vi_cv_sys5_pty" = yes; then
	AC_DEFINE(HAVE_SYS5_PTY)
fi
AC_MSG_RESULT($vi_cv_sys5_pty)

dnl Check for the revoke system call.
AC_MSG_CHECKING(for revoke system call)
AC_CACHE_VAL(vi_cv_revoke, [dnl
AC_TRY_LINK(, [revoke("a");],
	[vi_cv_revoke=yes], [vi_cv_revoke=no])])
if test "$vi_cv_revoke" = yes; then
	AC_DEFINE(HAVE_REVOKE)
fi
AC_MSG_RESULT($vi_cv_revoke)

dnl Some versions of sprintf return a pointer to the first argument instead
dnl of a character count.  We assume that the return value of snprintf and
dnl vsprintf etc. will be the same as sprintf, and check the easy one.
AC_MSG_CHECKING(for sprintf return value)
AC_CACHE_VAL(vi_cv_sprintf_count, [dnl
AC_TRY_RUN([main(){char buf[20]; exit(sprintf(buf, "XXX") != 3);}],
	[vi_cv_sprintf_count=yes], [vi_cv_sprintf_count=no])])
if test "$vi_cv_sprintf_count" = no; then
	AC_DEFINE(SPRINTF_RET_CHARPNT)
fi
AC_MSG_RESULT($vi_cv_sprintf_count)

dnl Check for C library DB routines.
dnl XXX
dnl Some older versions of DB can't handle vi, so, for now, always compile
dnl it in, unless the user specifies on the command line that we're to use
dnl a library one.
AC_MSG_CHECKING(for Berkeley DB package)
AC_CACHE_VAL(vi_cv_db_lib, [dnl
AC_ARG_WITH(db,
	[  --with-db=library|vi    library: The C library or -ldb has the DB routines.
                          vi:      Use the vi-provided DB routines],
	[if test "$withval" = "library"; then
		vi_cv_db_lib="library DB routines"
	else
	if test "$withval" = "vi"; then
		vi_cv_db_lib="vi DB routines"
	else
		echo
		echo "Fatal error: with-db may only be \"library\" or \"vi\"."
		exit 1
	fi
	fi], [vi_cv_db_lib="vi DB routines"])])
if test "$vi_cv_db_lib" = "vi DB routines"; then
	CPPFLAGS="$CPPFLAGS -I../db/include"
	LIBOBJS="\$(DBOBJS) $LIBOBJS"
fi
AC_MSG_RESULT($vi_cv_db_lib)

dnl Try and compile in the library's DB dnl hash routines if they exist,
dnl since vi doesn't use them, and they may be used locally to support
dnl the password and termcap databases, and may have diverged.  Linux puts
dnl the DB routines in -ldb, so we have to look around.
AC_MSG_CHECKING(for Berkeley DB hash routines)
AC_CACHE_VAL(vi_cv_db_hash_open, [dnl
AC_TRY_LINK(, [__hash_open(0, 0, 0, 0, 0);],
	[vi_cv_db_hash_open="C library"], [dnl
	SAVED_LIBS="$LIBS"
	LIBS="-ldb $LIBS"
	AC_TRY_LINK(, [__hash_open(0, 0, 0, 0, 0);],
		[vi_cv_db_hash_open="DB library"], [vi_cv_db_hash_open=none])
	LIBS=$SAVED_LIBS])])

if test "$vi_cv_db_hash_open" = "C library"; then
	AC_DEFINE(HAVE_DB_HASH_OPEN)
fi
if test "$vi_cv_db_hash_open" = "DB library"; then
	LIBS="-ldb $LIBS"
	TKLIBS="-ldb $TKLIBS"
	AC_DEFINE(HAVE_DB_HASH_OPEN)
fi
AC_MSG_RESULT($vi_cv_db_hash_open)

dnl Check for C library RE routines.
dnl XXX
dnl Need to have Henry's word-search extensions, so for now, always compile
dnl it in, unless the user specifies on the command line that we're to use
dnl the C library one.
AC_MSG_CHECKING(for POSIX 1003.2 RE routines)
AC_CACHE_VAL(vi_cv_re_lib, [dnl
AC_ARG_WITH(re, 
	[  --with-re=library|vi    library: Use the RE routines in the C library.
                          vi:      Use the vi-provided RE routines],
	[if test "$withval" = "library"; then
		vi_cv_re_lib="C library RE routines"
	else
	if test "$withval" = "vi"; then
		vi_cv_re_lib="vi RE routines"
	else
		echo
		echo "Fatal error: with-re may only be \"library\" or \"vi\"."
		exit 1
	fi
	fi], [vi_cv_re_lib="vi RE routines"])])
if test "$vi_cv_re_lib" = "vi RE routines"; then
	CPPFLAGS="$CPPFLAGS -I../regex"
	LIBOBJS="\$(REOBJS) $LIBOBJS"
fi
AC_MSG_RESULT($vi_cv_re_lib)

dnl DB/Vi uses specific integer sizes.
AC_SUBST(u_int8_decl)
AC_MSG_CHECKING(for u_int8_t)
AC_CACHE_VAL(vi_cv_uint8, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int8_t foo;,
	[vi_cv_uint8=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned char) != 1);}],
	[vi_cv_uint8="unsigned char"], [vi_cv_uint8=no]))])
AC_MSG_RESULT($vi_cv_uint8)
if test "$vi_cv_uint8" = no; then
	echo
	echo "Fatal error: no unsigned, 8-bit integral type."
	exit 1
fi
if test "$vi_cv_uint8" != yes; then
	u_int8_decl="typedef $vi_cv_uint8 u_int8_t;"
fi

AC_SUBST(u_int16_decl)
AC_MSG_CHECKING(for u_int16_t)
AC_CACHE_VAL(vi_cv_uint16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int16_t foo;,
	[vi_cv_uint16=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned short) != 2);}],
	[vi_cv_uint16="unsigned short"],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 2);}],
	[vi_cv_uint16="unsigned int"], [vi_cv_uint16=no])))])
AC_MSG_RESULT($vi_cv_uint16)
if test "$vi_cv_uint16" = no; then
	echo
	echo "Fatal error: no unsigned, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_uint16" != yes; then
	u_int16_decl="typedef $vi_cv_uint16 u_int16_t;"
fi

AC_SUBST(int16_decl)
AC_MSG_CHECKING(for int16_t)
AC_CACHE_VAL(vi_cv_int16, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int16_t foo;,
	[vi_cv_int16=yes],
AC_TRY_RUN([main(){exit(sizeof(short) != 2);}],
	[vi_cv_int16="short"],
AC_TRY_RUN([main(){exit(sizeof(int) != 2);}],
	[vi_cv_int16="int"], [vi_cv_int16=no])))])
AC_MSG_RESULT($vi_cv_int16)
if test "$vi_cv_int16" = no; then
	echo
	echo "Fatal error: no signed, 16-bit integral type."
	exit 1
fi
if test "$vi_cv_int16" != yes; then
	int16_decl="typedef $vi_cv_int16 int16_t;"
fi

AC_SUBST(u_int32_decl)
AC_MSG_CHECKING(for u_int32_t)
AC_CACHE_VAL(vi_cv_uint32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], u_int32_t foo;,
	[vi_cv_uint32=yes],
AC_TRY_RUN([main(){exit(sizeof(unsigned int) != 4);}],
	[vi_cv_uint32="unsigned int"],
AC_TRY_RUN([main(){exit(sizeof(unsigned long) != 4);}],
	[vi_cv_uint32="unsigned long"], [vi_cv_uint32=no])))])
AC_MSG_RESULT($vi_cv_uint32)
if test "$vi_cv_uint32" = no; then
	echo
	echo "Fatal error: no unsigned, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_uint32" != yes; then
	u_int32_decl="typedef $vi_cv_uint32 u_int32_t;"
fi

AC_SUBST(int32_decl)
AC_MSG_CHECKING(for int32_t)
AC_CACHE_VAL(vi_cv_int32, [dnl
AC_TRY_COMPILE([#include <sys/types.h>], int32_t foo;,
	[vi_cv_int32=yes],
AC_TRY_RUN([main(){exit(sizeof(int) != 4);}],
	[vi_cv_int32="int"],
AC_TRY_RUN([main(){exit(sizeof(long) != 4);}],
	[vi_cv_int32="long"], [vi_cv_int32=no])))])
AC_MSG_RESULT($vi_cv_int32)
if test "$vi_cv_int32" = no; then
	echo
	echo "Fatal error: no signed, 32-bit integral type."
	exit 1
fi
if test "$vi_cv_int32" != yes; then
	int32_decl="typedef $vi_cv_int32 int32_t;"
fi

AC_OUTPUT(Makefile port.h:port.h.in)
