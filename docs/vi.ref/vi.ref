.\" Copyright (c) 1994
.\"     The Regents of the University of California.  All rights reserved.
.\"
.\" %sccs.include.redist.roff%
.\"
.\"     $Id: vi.ref,v 8.28 1994/04/30 10:59:11 bostic Exp $ (Berkeley) $Date: 1994/04/30 10:59:11 $
.\"
.Dd "%Q%"
.Dt "EX/VI REFERENCE MANUAL" 1
.Os
.Sh NAME
.Nm ex, vi, view
.Nd text editors
.Sh DESCRIPTION
.Nm \&Vi
is a screen oriented text editor.
.Nm \&Ex
is a line-oriented text editor.
.Nm \&Ex
and
.Nm \&vi
are different interfaces to the same program,
and it is possible to switch back and forth during an edit session.
.Nm View
is the equivalent of using the
.Fl R
(read-only) option of
.Nm \&vi .
.Pp
This reference manual is the one provided with the
.Nm nex/nvi
versions of the
.Nm ex/vi
text editors.
.Nm Nex/nvi
are intended as bug-for-bug compatible replacements for the original
Fourth Berkeley Software Distribution (4BSD)
.Nm \&ex
and
.Nm \&vi
programs.
This reference manual is accompanied by a traditional-style manual page.
That manual page describes the functionality found in
.Nm ex/vi
in far less detail than the description here.
In addition, it describes the system interface to
.Nm ex/vi ,
e.g. command line options, session recovery, signals,
environmental variables, and similar things.
.Pp
This reference is intended for users already familiar with
.Nm ex/vi .
Anyone else should almost certainly read a good tutorial on the
editor first.
If you're in an unfamiliar environment, and you absolutely have to get
work done immediately, see the section entitled
.Dq "Fast Startup"
in the manual page.
It's probably enough to get you started.
.Pp
There are a few features in
.Nm nex/nvi
that are not found in historic versions of
.Nm ex/vi .
Some of the more interesting of those features are briefly described
in the section entitled
.Dq "Additional Features"
near the end of this document.
For the rest of this document,
.Nm nex/nvi
is used only when it's necessary to distinguish it from the historic
implementations of
.Nm ex/vi .
.Sh STARTUP INFORMATION
.Nm Ex/vi
interprets one of two possible environmental variables and reads up
to three of five possible files during startup.
The variables and files are expected to contain
.Nm \&ex
commands, not
.Nm \&vi
commands.
In addition, they are interpreted
.Em before
the file to be edited is read, and therefore many
.Nm \&ex
commands may not be used.
Generally, any command that requires output to the screen or that
needs a file upon which to operate, will cause an error if included
in a startup file or environmental variable.
.Pp
First, the file
.Pa /etc/vi.exrc
is read.
Second, the environmental variable
.Ev NEXINIT
(or the variable
.Ev EXINIT ,
if
.Ev NEXINIT
isn't set) is interpreted.
Third, if neither
.Ev NEXINIT
or
.Ev EXINIT
was set, the file
.Pa $HOME/.nexrc
(or the file
.Pa $HOME/.exrc ,
if
.Pa $HOME/.nexrc
doesn't exist) is read.
Fourth, the file
.Pa .nexrc
(or the file
.Pa .exrc ,
if
.Pa .nexrc
doesn't exist) is read.
.Pp
Startup files will not be read if they are owned by anyone other
than the real user-id of the user running
.Nm \&vi ,
(or by
.Dq root
in the case of the file
.Pa /etc/vi.exrc )
or if they are writable by anyone other than the owner.
Home directory startup files (i.e.
.Pa $HOME/.nexrc
and
.Pa $HOME/.exrc )
will not be read if the
.Dq HOME
environmental variable is not set.
Local startup files (i.e.
.Pa .nexrc
and
.Pa .exrc )
will not be read if the
.Sy exrc
option is turned off in the
.Pa /etc/vi.exrc ,
.Pa $HOME/.nexrc ,
or
.Pa $HOME/.exrc
files, or in the
.Ev NEXINIT
or
.Ev EXINIT
environmental variables.
It is not an error for any of the startup environmental variables
or files not to exist.
.Pp
Because the
.Nm \&ex
command set supported by
.Nm nex/nvi
is a superset of the command set supported by most historical implementations
of
.Nm \&ex ,
.Nm nex/nvi
can use the startup files created for the historical implementations,
but the converse may not be true.
.Pp
Finally, if the
.Fl s
(the historic
.Fl
option)
is specified, or if standard input is redirected from a file,
all environmental variables and startup files will be ignored.
.Pp
Once all environmental variables are interpreted,
and all startup files are read,
the first file to be edited is read in (or a temporary file is created).
Then, any commands specified using the
.Fl c
option are executed, in the context of that file.
.Sh RECOVERY
There is no recovery program for
.Nm nvi ,
nor does
.Nm nvi
run setuid.
Recovery files are created readable by the owner only, therefore,
users may recover any file which they can read, and the superuser
may recover any edit session.
.Pp
Edit sessions are backed by files in
.Pa /var/tmp/vi.recover ,
and are named
.Dq "vi.XXXX" ,
where
.Dq "XXXX"
is a number related to the process id.
When a file is first modified, a second file, which contains an
email message for the user, is created, and is named
.Dq "recover.XXXX" ,
where, again,
.Dq "XXXX"
is associated with the process id.
Both files are removed at the end of a normal edit session,
but will remain if the edit session is abnormally terminated
or the user enters the
.Nm ex/vi
.Dq "preserve"
command.
The use of the
.Pa /var/tmp
directory may be changed setting the
.Sy recdir
option in the user's or system startup information.
.Pp
The recovery directory should have the
.Dq "sticky-bit"
set so that only the owners of files may remove them.
If this is not possible on the system, then a pseudo-user should
own the recovery directory.
The recovery directory must be both read and write-able by
any user.
.Pp
The recovery file has all of the necessary information in it to enable the
user to recover the edit session.
In addition, it has all of the necessary email headers for sendmail.
When the system is rebooted, all of the files in
.Pa /var/tmp/vi.recover
named
.Dq "recover.XXXX"
should be sent by email,
using the
.Fl t
flag of sendmail (or a similar mechanism in other mailers).
A simple way to do this is to insert the following script into your
.Pa /etc/rc.local
(or other startup) file:
.ne 8v
.Bd -literal -offset indent -compact
# Recover nvi editor files.
virecovery=`echo /var/tmp/vi.recover/recover.*`
if [ "$virecovery" != "/var/tmp/vi.recover/recover.*" ]; then
	echo 'Recovering vi editor sessions'
	for i in $virecovery; do
		sendmail -t < $i
	done
fi
.Ed
.Pp
If
.Nm ex/vi
receives a hangup (SIGHUP) signal, it will automatically email the
recovery information to the user.
.Pp
If your system doesn't have the
.Xr sendmail 8
program (or a mailer program which supports the equivalent interface)
the source file
.Pa nvi/recover.c
will have to be modified to use your local mail delivery programs.
.Sh SIZING THE SCREEN
The size of the screen can be set in a number of ways.
.Nm Ex/vi
takes the following steps until values are obtained for both the
number of rows and number of columns in the screen.
.sp
.Bl -enum -compact
.It
If the environmental variable
.Ev LINES
exists, it is used to specify the number of rows in the screen.
.It
If the environmental variable
.Ev COLUMNS
exists, it is used to specify the number of columns in the screen.
.It
The TIOCGWINSZ
.Xr ioctl 2
is attempted on the standard error file descriptor.
.It
The termcap entry is checked for the
.Dq \&li
entry (rows) and the
.Dq \&co
entry (columns).
.It
The number of rows is set to 24, and the number of columns is set
to 80.
.El
.Pp
If a window change size signal (SIGWINCH) is received,
the new window size is retrieved using the TIOCGWINSZ
.Xr ioctl 2
call, and all other information is ignored.
.Sh CHARACTER DISPLAY
Printable characters are displayed using the local character set.
Non-printable characters, for which
.Xr iscntrl 3
returns true, and which are less than octal \e076, are displayed
as the string
.Dq ^<character> ,
where <character> is the character that is the character's value
offset from the
.Dq \&@
character.
For example, the octal character \e001 is displayed as
.Dq \&^A .
If
.Xr iscntrl 3
returns true for the octal character \e177, it is displayed as the
string
.Dq ^? .
All other characters are displayed as either hexadecimal values,
in the form
.Dq "0x<high-halfbyte> ... 0x<low-halfbyte>" ,
or as octal values, in the form
.Dq "\<high-one-or-two-bits> ... \<low-three-bits> .
The display of unknown characters is based on the value of the
.Sy octal
option.
.Pp
In
.Nm \&vi
command mode, the cursor is always positioned on the last column of
characters which take up more than one column on the screen.
In
.Nm \&vi
text insert mode, the cursor is positioned on the first column of
characters which take up more than one column on the screen.
.Sh REGULAR EXPRESSIONS AND REPLACEMENT STRINGS
Regular expressions are used in line addresses,
as the first part of
.Sy substitute ,
.Sy global ,
and
.Sy vglobal
commands,
and in search patterns.
.Pp
The regular expressions supported by
.Nm ex/vi
are, by default, the Basic Regular Expressions (BRE's) described in the
IEEE POSIX Standard 1003.2.
The
.Sy extended
option causes all regular expressions to be interpreted as the Extended
Regular Expressions (ERE's) described by the same standard.
(See
.Xr re_format 7
for more information.
Generally speaking, BRE's are
.Xr ed 1
and
.Xr grep 1
style regular expressions, and ERE's are
.Xr egrep 1
style regular expressions.)
.Pp
There are some special strings and characters that can be used in
RE's:
.Bl -enum -compact
.It
An empty RE (e.g.
.Dq \&// )
is equivalent to the last RE used.
.It
The construct
.Dq \e<
matches the beginning of a word.
.It
The construct
.Dq \e>
matches the end of a word.
.It
The character
.Dq \&~
matches the replacement part of the last
.Sy substitute
command.
.El
.Pp
When the
.Sy magic
option is
.Em not
set,
the only characters with special meanings are
.Dq \&^
at the beginning of an RE,
.Dq \&$
at the end of an RE, and the escaping character
.Dq \&\e .
The characters
.Dq \&. ,
.Dq \&* ,
.Dq \&[ ,
and
.Dq \&~
are treated as ordinary characters unless preceded by a
.Dq \&\e ;
when preceded by a
.Dq \&\e
they regain their special meaning.
.Pp
Replacement strings are the second part of a
.Sy substitute
command.
.Pp
The character
.Dq \&&
(or
.Dq \e&
if the
.Sy magic
option is
.Em not
set) in the replacement string stands for the text matched by the RE
that's being replaced.
The character
.Dq \&~
(or
.Dq \e~
if the
.Sy magic
option is
.Em not
set) stands for the replacement part of the previous
.Sy substitute
command.
.Pp
The string
.Dq \e# ,
where
.Dq \&#
is an integer value from 1 to 9, stands for the text matched by
the portion of the RE enclosed in the #'th set of escaped parentheses,
e.g.
.Dq \e(
and
.Dq \e) .
For example,
.Dq "s/abc\e(.*\e)def/\e1/"
deletes the strings
.Dq abc
and
.Dq def
from the matched pattern.
.Pp
The strings
.Dq \el ,
.Dq \eu ,
.Dq \eL ,
and
.Dq \eU
can be used to modify the case of elements in the replacement string.
The string
.Dq \el
causes the next character to be converted to lowercase; the string
.Dq \eu
behaves similarly, but converts to uppercase.
The strings
.Dq \eL
causes characters up to the end of the string or the next occurrence of
the strings
.Dq \ee
or
.Dq \eE
to be converted to lowercase; the string
.Dq \eU
behaves similarly, but converts to uppercase.
.Pp
If the entire replacement pattern is
.Dq Li "\&%" ,
then the last replacement pattern is used again.
.Pp
In
.Nm \&vi ,
inserting a <control-M> into the replacement string will cause the
matched line to be split into two lines at that point.
(The <control-M> will be discarded.)
.Sh GENERAL EDITOR DESCRIPTION
When
.Nm \&ex
or
.Nm \&vi
are executed, the text of a file is read (or a temporary file is created),
and then all editing changes happen to that copy of the file.
No changes effect the actual file until the file is written out,
either using a write command or another command which is affected by the
.Sy autowrite
option.
.Pp
Both
.Nm \&ex
and
.Nm \&vi
are modeful editors, i.e. they have two modes,
.Dq "command"
mode and
.Dq "text input"
mode.
When
.Nm \&ex
first starts running, it is in command mode, and usually displays a prompt
(see the
.Sy prompt
option for more information).
The prompt is a single colon
.Pq Dq Li "\&:"
character.
There are three commands that switch
.Nm \&ex
into text input mode:
.Sy append ,
.Sy change
and
.Sy insert .
Once in input mode, entering an empty line with a single period
.Pq Dq Li "\&."
on it terminates input and returns to command mode,
where it redisplays the prompt.
.Pp
When
.Nm \&vi
first starts running, it is in command mode as well.
There are eleven commands that switch
.Nm \&vi
into text input mode:
.Sy A ,
.Sy C ,
.Sy I ,
.Sy O ,
.Sy R ,
.Sy S ,
.Sy a ,
.Sy c ,
.Sy i ,
.Sy o
and
.Sy s .
Once in input mode, entering an <escape> character terminates input
and returns to command mode.
.Pp
The following words have special meanings in both the
.Nm \&ex
and
.Nm \&vi
command descriptions:
.sp
.Bl -tag -width "XXXX" -compact
.It Sy "<interrupt>"
The interrupt character is used to interrupt the current operation.
This character is normally <control-C>, however, whatever character
is set for the current terminal is used.
.sp
.It Sy "<literal next>"
The literal next character is used to escape the subsequent character
from any special meaning.
This character is normally <control-V>.
If the terminal is not set up to do XON/XOFF flow control,
then <control-Q> may be used as well.
.sp
.It Sy "current pathname"
The pathname of the file currently being edited by vi.
When the character
.Dq Li \&%
appears in a file name entered as part of an
.Nm \&ex
command argument, it's replaced by the current pathname.
(The
.Dq Li \&%
character can be escaped by preceding it with a backslash.)
.sp
.It Sy "alternate pathname"
The name of the last file name mentioned in an
.Nm \&ex
command, or, the previous current pathname if the last file mentioned
becomes the current file.
When the character
.Dq Li \&#
appears in a file name entered as part of an
.Nm \&ex
command argument, it's replaced by the alternate pathname.
(The
.Dq Li \&#
character can be escaped by preceding it with a backslash.)
.sp
.It Sy "buffer"
One of a number of named areas for saving copies of text.
Commands that change or delete text can save the changed or deleted
text into a specific buffer, for later use.
Buffers are named with a single character, preceded by a double quote,
e.g.
.Pq .Dq Li \&"<character> .
Historic implementations of
.Nm \&ex/vi
limited <character> to the alphanumeric characters;
.Nm \&nex/nvi
permits the use of any character.
.Pp
The buffers named by uppercase characters are the same as buffers
named by the lowercase characters (e.g. using the buffer named by
the English character
.Dq Li \&A
is the same as using the buffer named
.Dq Li \&a ),
with the exception that, if the buffer contents are being changed
(as with a text deletion or copying command), the text is
.Em appended
to the buffer, instead of replacing the current contents.
.Pp
The buffers named by the numeric characters (in English,
.Dq "\&1"
through
.Dq "\&9" ),
are special, in that if at least one line is changed or deleted in
the file,
(or a command changes or deletes a region that crosses a line boundary)
a copy of the text is placed into the numeric buffer
.Dq \&1 ,
regardless of the user specifying another buffer into which to store it.
Before this copy is done, the previous contents of buffer
.Dq \&1
are moved into buffer
.Dq \&2 ,
.Dq \&2
into buffer
.Dq \&3 ,
and so on.
In
.Nm \&vi , 
text may be explicitly stored or appended into the numeric buffers.
In this case, the buffer rotation described above occurs before the
replacement (or appending to) of the buffer's contents.
(Text cannot be explicitly stored or appended into the numeric buffers, in
.Nm \&ex ,
because of ambiguities it would cause in the
.Nm \&ex
command syntax.)
.Pp
When an
.Nm \&vi
command synopsis shows both a
.Dq Li [buffer]
and a
.Dq Li [count] ,
they may be presented in any order.
.Pp
Finally, all buffers are either
.Dq line
or
.Dq character
oriented.
All
.Nm \&ex
commands which store text into buffers are line oriented.
Some
.Nm \&vi
commands which store text into buffers are line oriented, and some
are character oriented.
The
.Nm \&vi
command
.Sy "display buffers"
notes for each buffer it's current orientation.
Generally, the only importance attached to this orientation is that
if the buffer is subsequently inserted into the text, line oriented
buffers create new lines for each of the lines they contain, and
character oriented buffers create new lines for any lines
.Em other
than the first and last lines they contain.
The first and last lines are inserted into the text at the current
cursor position.
.sp
.It Sy "unnamed buffer"
The unnamed buffer is a text storage area which is used by commands
that take a buffer as an argument when no buffer is specified by the
user.
.El
.bp
#include <vi.cmd.roff>
.bp
.Sh EX ADDRESSING
Addressing in
.Nm \&ex
(and when
.Nm \&ex
commands are executed from
.Nm \&vi )
relates to the current line.
In general, the current line is the last line affected by a command.
The exact effect on the current line is discussed under the description
of each command.
When the buffer contains no lines, the current line is zero.
.Pp
Addresses are constructed by one or more of the following methods:
.Bl -enum -compact
.It
The address
.Dq Li "\&."
refers to the current line.
.It
The address
.Dq Li "\&$"
refers to the last line of the file.
.It
The address
The address
.Dq Li \&N ,
where
.Li N
is a positive number, refers to the N-th line of the file.
.It
The address
.Dq Li '<character>
refers to the line marked with name <character>.
(See the
.Sy k
or
.Sy m
commands for more information on how to mark lines.)
.It
A regular expression (RE) enclosed by slashes
.Pq Dq Li "\&/"
is an address,
and it refers to the first line found by searching forwards from
the line
.Em after
the current line toward the end of the file, and stopping at the
first line containing a string matching the RE.
(The trailing slash can be omitted at the end of the command line.)
.Pp
If no RE is specified, i.e. the pattern is
.Dq Li \&// ,
the last RE used in any command is used in the search.
.Pp
If the
.Sy extended
option is set, the RE is handled as an extended RE, not a basic RE.
If the
.Sy wrapscan
option is set, the search wraps around to the beginning of the file
and continues up to and including the current line, so that the entire
file is searched.
.Pp
The form
.Dq Li \&\e/
is accepted for historic reasons, and is identical to
.Dq Li \&// .
.It
An RE enclosed in question marks
.Pq Dq Li "\&?"
addresses the first line found by searching backwards from the line
.Em preceding
the current line, toward the beginning of the file and stopping at the
first line containing a string matching the RE.
(The trailing question mark can be omitted at the end of a command line.)
.Pp
If no RE is specified, i.e. the pattern is
.Dq Li \&?? ,
the last RE used in any command is used in the search.
.Pp
If the
.Sy extended
option is set, the RE is handled as an extended RE, not a basic RE.
If the
.Sy wrapscan
option is set, the search  wraps around from the beginning of the file to
the end of the file and continues up to and including the current line,
so that the entire file is searched.
.Pp
The form
.Dq Li \&\e?
is accepted for historic reasons, and is identical to
.Dq Li \&?? .
.It
An address followed by a plus sign
.Pq Dq Li "\&+"
or a minus sign
.Pq Dq Li "\&-"
followed by a number is an offset address and refers to the
address plus (or minus) the indicated number of lines.
If the address is omitted, the addition or subtraction is done with
respect to the current line.
.It
An address of
.Dq Li +
or
.Dq Li -
followed by a number is an offset from the current line.
For example,
.Dq Li -5
is the same as
.Dq Li .-5 .
.It
An address ending with
.Dq Li +
or
.Dq Li -
has 1 added to or subtracted from the address, respectively.
As a consequence of this rule and of the previous rule,
the address
.Dq Li -
refers to the line preceding the current line.
Moreover, trailing
.Dq Li +
and
.Dq Li -
characters have a cumulative effect.
For example,
.Dq Li ++-++
refers to the current line plus 3.
.It
A percent sign
.Pq Dq Li "\&%"
is equivalent to the address range
.Dq Li 1,$ .
.Pp
.Nm \&Ex
commands require zero, one, or two addresses.
It is an error to specify an address to a command which requires zero
addresses.
.Pp
The addresses in a range are separated from each other by a comma
.Pq Dq "\&,"
or a semicolon
.Pq Dq "\&;" .
In the latter case, the current line
.Pq Dq "\&."
is set to the first address,
and only then is the second address calculated.
This feature can be used to determine the starting line for forwards and
backwards searches (see rules (5) and (6) above).
The second address of any two-address sequence corresponds to a line that
follows, in the file, the line corresponding to the first address.
The first address must be less than or equal to the second address.
The first address must be greater than or equal to the first line of the
file, and the last address must be less than or equal to the last line
of the file.
.Pp
If the user provides more than the expected number of addresses to any
.Nm \&ex
command, the first addresses specified are discarded.
For example,
.Dq Li "1,2,3,5 print"
prints lines 3 through 5, because the
.Sy print
command only takes two addresses.
.bp
#include <ex.cmd.roff>
.bp
#include <set.opt.roff>
.bp
.Sh ADDITIONAL FEATURES IN NEX/NVI
There are a few features in
.Nm nex/nvi
that are not found in historic versions of
.Nm ex/vi .
Some of the more interesting of those features are as follows:
.Bl -tag -width indent
.It "8-bit clean data, large lines, files"
.Nm \&Nvi/nex
will edit any format file.
Line lengths are limited by available memory,
and file sizes are limited by available disk space.
The command
.Dq "<control-X>[0-9A-Fa-f]* ,"
in input mode, will insert any legal character value into the text.
.It "Split screens"
The command
.Dq ":sp[lit] [file ...]"
splits the screen in vi mode.
The key
.Dq "<control-W>"
switches between the foreground screens,
and the
.Dq ":resize count"
command can be used to grow or shrink a particular screen.
.It "Background and foreground screens"
The command
.Dq ":bg"
backgrounds the current screen,
and the command
.Dq ":fg [file]"
foregrounds the backgrounded screen
that is editing the specified file, or, by default, the first background
screen on the queue.
The command
.Dq ":di[splay] s[creens]"
lists the background screens.
.\".It "Shell screens"
.\"The command
.\".Dq ":sc[ript] [file ...]"
.\"runs a shell in the screen.
.\"Editing is unchanged, with the exception that a <carriage-return>
.\"enters the current line (stripped of any prompt) as input to the
.\"shell.
.It "Tag stacks"
Tags are now maintained in a stack.
The command
.Dq "<control-T>"
returns to the previous tag location.
The command
.Dq ":tagpop [number \| file]"
returns to the most recent tag
location by default, or, optionally to a specific tag number in the
tag stack, or the most recent tag from the specified file.
Use the command
.Dq ":di[splay] t[ags]"
to view the tags stack.
The command
.Dq ":tagtop"
returns to the top of the tag stack.
.It "New displays"
The command
.Dq ":di[splay] b[uffers] \| s[creens] \| t[ags]"
can be
used to display, respectively, the current cut buffers,
the backgrounded screens, and the tags stack.
.It "Infinite undo"
The changes made during an edit session may be rolled backward and
forward.
A '.' command immediately after a 'u' command continues either forward
or backward depending on whether the 'u' command was an undo or a redo.
.It "Usage information"
The command
.Dq ":exu[sage] [cmd]"
and
.Dq "viu[sage] [key]"
provide usage
information for all of the ex and vi commands by default, or, optionally,
for a specific command or key.
.It "Extended regular expressions"
The
.Dq ":set extended"
command treats search and other command regular
expressions as extended (egrep(1) style) regular expressions.
.It "Word search"
The command
.Dq "<control-A>"
searches for the word referenced by the cursor.
.It "Number increment"
The command
.Dq "#"
increments the number referenced by the cursor.
.It "Previous file"
The command
.Dq ":prev[ious][!]"
edits the previous file from the
argument list.
.It "Left-Right scrolling"
The command
.Dq ":set leftright"
makes
.Nm nvi
do left-right screen scrolling, instead of the traditional
.Nm \&vi
line wrapping.
