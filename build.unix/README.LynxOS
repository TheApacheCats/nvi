0. Introduction
---------------

This file describes how to build and install the Berkeley `nvi' editor for
the LynxOS 2.4.0 operating system.

Note that even though LynxOS 2.4.0 is available for a variety of different
hardware platforms, I personally have only tried building nvi on LynxOS/x86
and LynxOS/PowerPC (using LynxOS 2.4.0 in both cases), so those are the only
platforms that I am sure that you can build nvi on at the present time, how-
ever I know of no reason why these procedures should not work also when
attempting to build nvi on other LynxOS hardware platforms (e.g. Sparc, and
mc680x0).

Also note that these procedures may not work on versions of LynxOS prior
to 2.4.0.  (As I understand it, a good deal of work went into making the
2.4.0 release more POSIX-compliant, and I have no idea what build glitches,
if any, you might run into if you try to build nvi on a pre-2.4.0 version
of LynxOS.)

There are basically four steps to configuring, building, and installing nvi
of your LynxOS, namely:

	1.  Get setup to use the proper C compiler.
	2.  Replace your installed `tr' program.
	3.  Fix your system include files.
	4.  Do a normal configure, build, and install of nvi.

These steps are described in separate sections below.

1.  Get Setup to Use the Proper C Compiler
------------------------------------------

The most important step when building nvi on LynxOS is your selection of a
C compiler to use during the build.  DO NOT try to use either the /bin/cc
or the /bin/gcc compiler (i.e. GCC version 1.42) to build nvi.  These two
compilers are ancient, crusty, buggy, and should probably not be used for
anything.  Rather than using either of these two C compilers, I strongly
advise you to use the more up-to-date version of the GNU C compiler which
is distributed with LynxOS.  The most up-to-date version of GCC distributed
with LynxOS 2.4.0 for the x86, m680x0, and Sparc processor families is
normally installed as:

	/cygnus/94q4-lynxos-x86/bin/gcc

In the case of LynxOS 2.4.0 for PowerPC processors, the pathname of the most
up-to-date version of GCC which is distributed with LynxOS 2.4.0 is actually:

	/cygnus/95q2-lynxos-ppc/bin/gcc

so if you are on a PowerPC, use that pathname for GCC instead of the one shown
above.

You can probably just setup your $PATH (*before* you do the configure step
for nvi) so that the more up-to-date version of the GNU C compiler will
appear in your path before the /bin/cc and/or /bin/gcc compilers, but I
personally would take no chances.  What I did when I built nvi was the
following:

	su root
	cd /bin
	mv cc cc.save
	ln -s /cygnus/94q4-lynxos-x86/bin/gcc ./cc
	mv gcc gcc.save
	ln -s /cygnus/94q4-lynxos-x86/bin/gcc ./gcc

These steps should work for the x86, sparc, and 680x0 versions of LynxOS 2.4.0,
however if you are using LynxOS 2.4.0 on a PowerPC, you should do the follow-
ing steps instead:

	su root
	cd /bin
	ln -s /cygnus/95q2-lynxos-ppc/bin/gcc ./cc
	mv gcc gcc.save
	ln -s /cygnus/95q2-lynxos-ppc/bin/gcc ./gcc

(Note that on LynxOS 2.4.0 for the PowerPC, there is no pre-existing /bin/cc
file, so in that case, you don't even have to bother trying to make a backup
of the /bin/cc compiler, because it won't even be present on your system.)

The bottom line is that when you get done setting things up, the most up-to-
date version of gcc on your system should be available to you as the first
`cc' program on your path.  (You should verify that this is the case just
by type `cc -v'.  You should then see the proper version of of gcc print
out, depending on your system type.  See above.)

Performing the steps shown above will insure that anything you compile from
now on will be compiled with the most up-to-date version of GCC which is
shipped with your Lynx operating system.  (Note that the versions of GCC
which are currently shipping with LynxOS 2.4.0 are also somewhat out-of-date
themselves, but they are still quite a bit newer and more bug-free and more
ANSI conformant that those other two C compilers which currently ship with
LynxOS.)

Anyway, that's the most important thing about building nvi on LynxOS 2.4.0.
Just make sure that you use a decent C compiler.

2.  Replace Your Installed `tr' Program
---------------------------------------

The `tr' program which comes bundled with LynxOS 2.4.0 (as /bin/tr) has a
somewhat obscure bug which just happens to be tickled by almost all GNU
`autoconf' generated `configure' scripts (including the one that nowadays
comes bundled with nvi).  Using the stock /bin/tr program on LynxOS when
executing such `configure' scripts can and will cause these scripts to
malfunction in various ways.  It is therefore strongly suggested that you
replace you LynxOS /bin/tr program with a working version of `tr' _before_
you even try to configure nvi.

You can obtain sources for a working version of the `tr' command as part of
the GNU `textutils' package (the latest version of which, at the time of this
writing, is 1.17).  The GNU textutils package is available for downloading
from prep.ai.mit.edu in the pub/gnu directory.  Look for the file named
textutils-1.17.tar.gz, or an even more recent version of textutils, if one
is available.  Fetch it, gunzip it, untar it, and follow the directions in
the INSTALL file included in the tar file to build and install the entire
textutils set of utility programs (which includes a working `tr' program).
Then just make sure that the GNU version of `tr' appears on your $PATH
_before_ the LynxOS version of `tr' (i.e. /bin/tr).  Be sure to do this
step _before_ you configure nvi.

When building the textutils set of programs, I suggest that you use the most
up-to-date C compiler available on your system (as described above).  Also,
note that it will be important for you to AVOID using the -O (optimize)
compiler option when building the GNU textutils package, even if you are
using the most up-to-date version of gcc which shipped with your system.
If you try to use -O when building the textutils package on an x86 with
the Cygnus 94q4 C compiler, you will end up with a `tr' program which will
malfunction even worse than the one you are trying to replace!  If you use
-O when building the textutils package on LynxOS on the PowerPC (using the
Cygnus 95q2 C compiler) you will just get yourself a compiler crash.  So
just don't use -O when building textutils.  You can avoid using -O by in-
voking make in the textutils directory as follows:

	make CFLAGS="-g"

3.  Fix Your System Include Files
---------------------------------

If you are building nvi on a PowerPC system, it is also important that you
apply the patches given at the end of this file to your /usr/include files.
(Note that you will have to be root in order to do this.)  Two of the patches
included below fix a pair of serious bugs in the /usr/include/stdarg.h file
on the PowerPC, and you really _do_ want to have these bugs fixed anyway,
because without these fixes, anything that you compile which uses <stdarg.h>
will very likely malfunction at run-time.

Regardless of which LynxOS platform you are using (i.e. x86, PowerPC, Sparc,
or m680x0) you may want to apply all of the system include files patches that
are included below anyway.  Doing so will clean up a few minor problems with
the relevant system include files (i.e. <stdarg.h>, <ioctl.h>, and <wait.h>)
and this step will also prevent a few warnings which you would otherwise get
during the build of nvi.

You can apply all of the patches given at the end of this file simply by
doing the following:

	su root
	cd /usr/include
	/bin/patch < this-file

Where `this-file' is the actual full pathname of the file you are now reading,
wherever it may reside on your own system.

4.  A Brief Note about Sendmail
-------------------------------

I should mention also that LynxOS does not normally ship with the `sendmail'
mail transfer program installed, either under /usr/lib/ or anywhere else for
that matter.  This isn't really a big problem, but nvi normally wants and
expects to have a sendmail program available so that it can send users notifi-
cations (by mail) whenever a partially edited file is preserved by the editor
in response to a sudden system crash, a sudden system shutdown, or an unexpect-
ed serial-line hangup.  You can configure and build nvi without any sendmail
program installed on your system, but you will get warnings about its absence
when you are doing the initial configure step prior to actually building nvi.
If you want to have a fully-functional nvi which does send out notification
messages (by mail) whenever partially edited files are preserved during a
serial line hangup or system crash, then you should get the BSD sendmail
sources (via ftp from ftp.cs.berkeley.edu), build and install sendmail, and
then reconfigure, rebuild, and reinstall nvi.

Please contact me at the address below if you find any bugs in the LynxOS
port of NVI.  Thanks.

Ron Guilmette
Roseville, California
<rfg@monkeys.com>
June 10, 1996


cut here for LynxOS 2.4.0 system include files patches
-----------------------------------------------------------------------------
*** wait.h	Fri Apr 26 10:02:45 1996
--- wait.h	Sun May 19 05:36:50 1996
***************
*** 94,104 ****
  /* Function prototypes */
  #ifndef __LYNXOS
- #ifdef _POSIX_SOURCE
  extern pid_t wait		_AP((int *));
  extern pid_t waitpid	_AP((pid_t, int *, int));
! #else
! extern int wait		_AP((union wait *));
! extern int waitpid	_AP((int, union wait *, int));
! extern int wait3	_AP((union wait *, int, struct rusage *));
  #endif
  #endif /* !__LYNXOS */
--- 94,101 ----
  /* Function prototypes */
  #ifndef __LYNXOS
  extern pid_t wait		_AP((int *));
  extern pid_t waitpid	_AP((pid_t, int *, int));
! #ifndef _POSIX_SOURCE
! extern int wait3	_AP((int *, int, struct rusage *));
  #endif
  #endif /* !__LYNXOS */
*** ioctl.h	Fri Apr 26 16:50:51 1996
--- ioctl.h	Sat May 18 17:55:16 1996
***************
*** 572,576 ****
  
  #ifndef __LYNXOS
! extern int ioctl	_AP((int, int, char *));
  #endif
  
--- 572,576 ----
  
  #ifndef __LYNXOS
! extern int ioctl	_AP((int, int, ...));
  #endif
  
*** stdarg.h	Fri Apr 26 16:51:02 1996
--- stdarg.h	Sat May 18 19:34:13 1996
***************
*** 88,92 ****
  	(((sizeof(TYPE) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
  
! #define va_start(AP, LASTARG)	(AP = ((char *) __builtin_next_arg ()))
  
  void va_end(va_list);		/* Defined in libgcc.a */
--- 88,92 ----
  	(((sizeof(TYPE) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
  
! #define va_start(AP, LASTARG)	(AP = ((char *) __builtin_next_arg (LASTARG)))
  
  void va_end(va_list);		/* Defined in libgcc.a */
***************
*** 162,166 ****
  	(((sizeof(TYPE) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
  
! #define va_start(AP, LASTARG)	(AP = ((char *) __builtin_next_arg ()))
  
  void va_end(va_list);		/* Defined in libgcc.a */
--- 162,166 ----
  	(((sizeof(TYPE) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
  
! #define va_start(AP, LASTARG)	(AP = ((char *) __builtin_next_arg (LASTARG)))
  
  void va_end(va_list);		/* Defined in libgcc.a */
